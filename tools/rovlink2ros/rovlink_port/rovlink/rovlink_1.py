# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List

from rovlink.api.sensor_bb import *
from rovlink.api.control_bb import *
from rovlink.api.battery_bb import *
from rovlink.api.exswitch_bb import *

# ====================== RovDeviceType ======================

# Enum: RovDeviceType [1] {6 values}
class RovDeviceType(Enum):
    NONE = 0
    POWER_CAB = 1
    CONTROL_CAB = 2
    COMM_CAB = 3
    MAIN_CAB = 4
    HOST = 5

# ==================== End RovDeviceType ====================

# ====================== RovlinkFrameType ======================

# Enum: RovlinkFrameType [1] {53 values}
class RovlinkFrameType(Enum):
    SENSOR_NONE = 0
    SENSOR_CAB_TEMP_HUMID_PRESS = 1
    SENSOR_WATER_TEMP_DEPTH_PRESS = 2
    SENSOR_ACCELERATION = 3
    SENSOR_ANGULAR_VELOCITY = 4
    SENSOR_EULER_ANGLE = 5
    SENSOR_MAGNETIC_FIELD = 6
    SENSOR_HEIGHT_SONAR = 7
    SENSOR_DISTANCE_SONAR = 8
    EXDATA_LEAKAGE = 16
    EXDATA_KEEP_ALIVE = 17
    CONTROL_PROPELLER_A = 33
    CONTROL_PROPELLER_B = 34
    CONTROL_PROPELLER_C = 35
    CONTROL_PROPELLER_D = 36
    CONTROL_LIGHT_A = 37
    CONTROL_LIGHT_B = 38
    CONTROL_PTZ = 39
    CONTROL_SERVO_A = 40
    CONTROL_SERVO_B = 41
    CONTROL_SERVO_C = 42
    CONTROL_POSTURE = 43
    HOST_CAMARA = 49
    ALGORITHM_PID_KP = 65
    ALGORITHM_PID_KI = 66
    ALGORITHM_PID_KD = 67
    COMPONENT_PROPELLER = 81
    COMPONENT_LIGHT = 82
    COMPONENT_PTZ = 83
    COMPONENT_SERVO_A = 84
    COMPONENT_SERVO_B = 85
    EXCOMPONENT_RELAY = 97
    EXCOMPONENT_RESCUE = 98
    MODE_MODE_A = 113
    MODE_MODE_B = 114
    EXCONTROL_CLAMP = 129
    EXCONTROL_ARM_A = 130
    EXCONTROL_ARM_B = 131
    EXCONTROL_ARM_C = 132
    BETTERY_VOLTAGE = 160
    BETTERY_CURRENT_GAIN = 161
    BETTERY_CURRENT_BIAS = 162
    BETTERY_CURRENT = 163
    BETTERY_REMAIN = 164
    CURRENT_PROPELLER_A = 176
    CURRENT_PROPELLER_B = 177
    CURRENT_PROPELLER_C = 178
    CURRENT_PROPELLER_D = 179
    CURRENT_PTZ = 180
    CURRENT_SERVO_A = 181
    CURRENT_SERVO_B = 182
    EXTRASWITCH_SONAR_P30 = 192
    EXTRASWITCH_RPI = 193

# ==================== End RovlinkFrameType ====================

# ====================== RovlinkFrame ======================

# Struct: RovlinkFrame [8] {6 fields}
class RovlinkFrame:
    def __init__(self):
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        self._opcode: RovlinkFrameType = None
        # [1:1#1) NormalField: bool sensor[#1]
        self._sensor: bool = False
        # [1#1:1#2) NormalField: bool valid[#1]
        self._valid: bool = False
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        self._device: RovDeviceType = None
        # [2:8) NormalField: uint8<6> payload[6]
        self._payload: List[int] = [0 for i in range(6)]

    @staticmethod
    def size() -> int:
        return 8

    # RawGetter: opcode
    @property
    def opcode(self) -> RovlinkFrameType:
        return self._opcode

    # RawSetter: opcode
    @opcode.setter
    def opcode(self, value: RovlinkFrameType) -> None:
        print(value)
        self._opcode = value

    # RawGetter: sensor
    @property
    def sensor(self) -> bool:
        return self._sensor

    # RawSetter: sensor
    @sensor.setter
    def sensor(self, value: bool) -> None:
        self._sensor = value

    # RawGetter: valid
    @property
    def valid(self) -> bool:
        return self._valid

    # RawSetter: valid
    @valid.setter
    def valid(self, value: bool) -> None:
        self._valid = value

    # RawGetter: device
    @property
    def device(self) -> RovDeviceType:
        return self._device

    # RawSetter: device
    @device.setter
    def device(self, value: RovDeviceType) -> None:
        self._device = value

    # RawGetter: payload
    @property
    def payload(self) -> List[int]:
        return self._payload

    # RawSetter: payload
    @payload.setter
    def payload(self, value: List[int]) -> None:
        self._payload = value

    # Encoder: RovlinkFrame
    def encode(self) -> bytearray:
        data = bytearray(8)
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_0 = self._opcode.value
        data[0] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        # [1:1#1) NormalField: bool sensor[#1]
        data[1] = (((((self._sensor >> 0) & 1) >> 0) << 0) & 1)
        # [1#1:1#2) NormalField: bool valid[#1]
        data[1] |= (((((self._valid >> 0) & 1) >> 0) << 1) & 2)
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_12 = self._device.value
        data[1] |= (((((temp_field_at_pos_12 >> 0) & 15) >> 0) << 4) & 240)
        # [2:8) NormalField: uint8<6> payload[6]
        data[2] = (((((self._payload[0] >> 0) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._payload[1] >> 0) & 255) >> 0) << 0) & 255)
        data[4] = (((((self._payload[2] >> 0) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._payload[3] >> 0) & 255) >> 0) << 0) & 255)
        data[6] = (((((self._payload[4] >> 0) & 255) >> 0) << 0) & 255)
        data[7] = (((((self._payload[5] >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovlinkFrame
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_0 = (((data[0] & 255) >> 0) << 0)
        self._opcode = RovlinkFrameType(temp_field_at_pos_0)
        # [1:1#1) NormalField: bool sensor[#1]
        self._sensor = (((data[1] & 1) >> 0) << 0)
        # [1#1:1#2) NormalField: bool valid[#1]
        self._valid = (((data[1] & 2) >> 1) << 0)
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_12 = (((data[1] & 240) >> 4) << 0)
        self._device = RovDeviceType(temp_field_at_pos_12)
        # [2:8) NormalField: uint8<6> payload[6]
        self._payload[0] = (((data[2] & 255) >> 0) << 0)
        self._payload[1] = (((data[3] & 255) >> 0) << 0)
        self._payload[2] = (((data[4] & 255) >> 0) << 0)
        self._payload[3] = (((data[5] & 255) >> 0) << 0)
        self._payload[4] = (((data[6] & 255) >> 0) << 0)
        self._payload[5] = (((data[7] & 255) >> 0) << 0)
        return True

# ==================== End RovlinkFrame ====================

# ====================== RovlinkFullFrame ======================

# Struct: RovlinkFullFrame [10] {9 fields}
class RovlinkFullFrame:
    def __init__(self):
        # [0:1) NormalField: uint8 header[1]
        self._header: int = 0
        # [virtual] EmbeddedField: RovlinkFrame [8]
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        self._opcode: RovlinkFrameType = None
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor: bool = False
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid: bool = False
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        self._device: RovDeviceType = None
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload: List[int] = [0 for i in range(6)]
        # [9:10) NormalField: uint8 crc[1]
        self._crc: int = 0

    @staticmethod
    def size() -> int:
        return 10

    # RawGetter: header
    @property
    def header(self) -> int:
        return self._header

    # RawSetter: header
    @header.setter
    def header(self, value: int) -> None:
        self._header = value

    # RawGetter: opcode
    @property
    def opcode(self) -> RovlinkFrameType:
        return self._opcode

    # RawSetter: opcode
    @opcode.setter
    def opcode(self, value: RovlinkFrameType) -> None:
        self._opcode = value

    # RawGetter: sensor
    @property
    def sensor(self) -> bool:
        return self._sensor

    # RawSetter: sensor
    @sensor.setter
    def sensor(self, value: bool) -> None:
        self._sensor = value

    # RawGetter: valid
    @property
    def valid(self) -> bool:
        return self._valid

    # RawSetter: valid
    @valid.setter
    def valid(self, value: bool) -> None:
        self._valid = value

    # RawGetter: device
    @property
    def device(self) -> RovDeviceType:
        return self._device

    # RawSetter: device
    @device.setter
    def device(self, value: RovDeviceType) -> None:
        self._device = value

    # RawGetter: payload
    @property
    def payload(self) -> List[int]:
        return self._payload

    # RawSetter: payload
    @payload.setter
    def payload(self, value: List[int]) -> None:
        self._payload = value

    # RawGetter: crc
    @property
    def crc(self) -> int:
        return self._crc

    # RawSetter: crc
    @crc.setter
    def crc(self, value: int) -> None:
        self._crc = value

    # Encoder: RovlinkFullFrame
    def encode(self) -> bytearray:
        data = bytearray(10)
        # [0:1) NormalField: uint8 header[1]
        data[0] = (((((self._header >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = self._opcode.value
        data[1] = (((((temp_field_at_pos_8 >> 0) & 255) >> 0) << 0) & 255)
        # [2:2#1) NormalField: bool sensor[#1]
        data[2] = (((((self._sensor >> 0) & 1) >> 0) << 0) & 1)
        # [2#1:2#2) NormalField: bool valid[#1]
        data[2] |= (((((self._valid >> 0) & 1) >> 0) << 1) & 2)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = self._device.value
        data[2] |= (((((temp_field_at_pos_20 >> 0) & 15) >> 0) << 4) & 240)
        # [3:9) NormalField: uint8<6> payload[6]
        data[3] = (((((self._payload[0] >> 0) & 255) >> 0) << 0) & 255)
        data[4] = (((((self._payload[1] >> 0) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._payload[2] >> 0) & 255) >> 0) << 0) & 255)
        data[6] = (((((self._payload[3] >> 0) & 255) >> 0) << 0) & 255)
        data[7] = (((((self._payload[4] >> 0) & 255) >> 0) << 0) & 255)
        data[8] = (((((self._payload[5] >> 0) & 255) >> 0) << 0) & 255)
        # [9:10) NormalField: uint8 crc[1]
        data[9] = (((((self._crc >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovlinkFullFrame
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: uint8 header[1]
        self._header = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = (((data[1] & 255) >> 0) << 0)
        self._opcode = RovlinkFrameType(temp_field_at_pos_8)
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor = (((data[2] & 1) >> 0) << 0)
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid = (((data[2] & 2) >> 1) << 0)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = (((data[2] & 240) >> 4) << 0)
        self._device = RovDeviceType(temp_field_at_pos_20)
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload[0] = (((data[3] & 255) >> 0) << 0)
        self._payload[1] = (((data[4] & 255) >> 0) << 0)
        self._payload[2] = (((data[5] & 255) >> 0) << 0)
        self._payload[3] = (((data[6] & 255) >> 0) << 0)
        self._payload[4] = (((data[7] & 255) >> 0) << 0)
        self._payload[5] = (((data[8] & 255) >> 0) << 0)
        # [9:10) NormalField: uint8 crc[1]
        self._crc = (((data[9] & 255) >> 0) << 0)
        return True

# ==================== End RovlinkFullFrame ====================

