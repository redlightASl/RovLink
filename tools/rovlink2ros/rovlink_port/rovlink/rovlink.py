# Target: Python (single file)
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List

# ====================== RovBatteryVoltageData ======================

# Struct: RovBatteryVoltageData [6] {3 fields}
class RovBatteryVoltageData:
    def __init__(self):
        # [0:2) NormalField: uint16 voltage[2]
        self._voltage: int = 0
        # [2:4) NormalField: uint16 power[2]
        self._power: int = 0
        # [4:6) NormalField: uint16 discharge[2]
        self._discharge: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: voltage
    @property
    def voltage(self) -> int:
        return self._voltage

    # RawSetter: voltage
    @voltage.setter
    def voltage(self, value: int) -> None:
        self._voltage = value

    # RawGetter: power
    @property
    def power(self) -> int:
        return self._power

    # RawSetter: power
    @power.setter
    def power(self, value: int) -> None:
        self._power = value

    # RawGetter: discharge
    @property
    def discharge(self) -> int:
        return self._discharge

    # RawSetter: discharge
    @discharge.setter
    def discharge(self, value: int) -> None:
        self._discharge = value

    # Encoder: RovBatteryVoltageData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 voltage[2]
        data[0] = (((((self._voltage >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._voltage >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 power[2]
        data[2] = (((((self._power >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._power >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 discharge[2]
        data[4] = (((((self._discharge >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._discharge >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatteryVoltageData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 voltage[2]
        self._voltage = (((data[0] & 255) >> 0) << 8)
        self._voltage |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 power[2]
        self._power = (((data[2] & 255) >> 0) << 8)
        self._power |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 discharge[2]
        self._discharge = (((data[4] & 255) >> 0) << 8)
        self._discharge |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatteryVoltageData ====================

# ====================== RovBatteryCurrentData ======================

# Struct: RovBatteryCurrentData [6] {3 fields}
class RovBatteryCurrentData:
    def __init__(self):
        # [0:2) NormalField: uint16 ca1[2]
        self._ca1: int = 0
        # [2:4) NormalField: uint16 ca2[2]
        self._ca2: int = 0
        # [4:6) NormalField: uint16 ca3[2]
        self._ca3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: ca1
    @property
    def ca1(self) -> int:
        return self._ca1

    # RawSetter: ca1
    @ca1.setter
    def ca1(self, value: int) -> None:
        self._ca1 = value

    # RawGetter: ca2
    @property
    def ca2(self) -> int:
        return self._ca2

    # RawSetter: ca2
    @ca2.setter
    def ca2(self, value: int) -> None:
        self._ca2 = value

    # RawGetter: ca3
    @property
    def ca3(self) -> int:
        return self._ca3

    # RawSetter: ca3
    @ca3.setter
    def ca3(self, value: int) -> None:
        self._ca3 = value

    # Encoder: RovBatteryCurrentData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 ca1[2]
        data[0] = (((((self._ca1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._ca1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 ca2[2]
        data[2] = (((((self._ca2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._ca2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 ca3[2]
        data[4] = (((((self._ca3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._ca3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatteryCurrentData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 ca1[2]
        self._ca1 = (((data[0] & 255) >> 0) << 8)
        self._ca1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 ca2[2]
        self._ca2 = (((data[2] & 255) >> 0) << 8)
        self._ca2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 ca3[2]
        self._ca3 = (((data[4] & 255) >> 0) << 8)
        self._ca3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatteryCurrentData ====================

# ====================== RovBatterySocData ======================

# Struct: RovBatterySocData [6] {3 fields}
class RovBatterySocData:
    def __init__(self):
        # [0:2) NormalField: uint16 soc[2]
        self._soc: int = 0
        # [2:4) NormalField: uint16 discharge_time[2]
        self._discharge_time: int = 0
        # [4:6) NormalField: uint16 res_time[2]
        self._res_time: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: soc
    @property
    def soc(self) -> int:
        return self._soc

    # RawSetter: soc
    @soc.setter
    def soc(self, value: int) -> None:
        self._soc = value

    # RawGetter: discharge_time
    @property
    def discharge_time(self) -> int:
        return self._discharge_time

    # RawSetter: discharge_time
    @discharge_time.setter
    def discharge_time(self, value: int) -> None:
        self._discharge_time = value

    # RawGetter: res_time
    @property
    def res_time(self) -> int:
        return self._res_time

    # RawSetter: res_time
    @res_time.setter
    def res_time(self, value: int) -> None:
        self._res_time = value

    # Encoder: RovBatterySocData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 soc[2]
        data[0] = (((((self._soc >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._soc >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 discharge_time[2]
        data[2] = (((((self._discharge_time >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._discharge_time >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 res_time[2]
        data[4] = (((((self._res_time >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._res_time >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatterySocData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 soc[2]
        self._soc = (((data[0] & 255) >> 0) << 8)
        self._soc |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 discharge_time[2]
        self._discharge_time = (((data[2] & 255) >> 0) << 8)
        self._discharge_time |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 res_time[2]
        self._res_time = (((data[4] & 255) >> 0) << 8)
        self._res_time |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatterySocData ====================

# ====================== RovSonarSwitchData ======================

# Struct: RovSonarSwitchData [1] {1 fields}
class RovSonarSwitchData:
    def __init__(self):
        # [0:1) NormalField: bool open_sonar[1]
        self._open_sonar: bool = False

    @staticmethod
    def size() -> int:
        return 1

    # RawGetter: open_sonar
    @property
    def open_sonar(self) -> bool:
        return self._open_sonar

    # RawSetter: open_sonar
    @open_sonar.setter
    def open_sonar(self, value: bool) -> None:
        self._open_sonar = value

    # Encoder: RovSonarSwitchData
    def encode(self) -> bytearray:
        data = bytearray(1)
        # [0:1) NormalField: bool open_sonar[1]
        data[0] = (((((self._open_sonar >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSonarSwitchData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool open_sonar[1]
        self._open_sonar = (((data[0] & 255) >> 0) << 0)
        return True

# ==================== End RovSonarSwitchData ====================

# ====================== RovRpiSwitchData ======================

# Struct: RovRpiSwitchData [1] {1 fields}
class RovRpiSwitchData:
    def __init__(self):
        # [0:1) NormalField: bool shutdown_raspberry[1]
        self._shutdown_raspberry: bool = False

    @staticmethod
    def size() -> int:
        return 1

    # RawGetter: shutdown_raspberry
    @property
    def shutdown_raspberry(self) -> bool:
        return self._shutdown_raspberry

    # RawSetter: shutdown_raspberry
    @shutdown_raspberry.setter
    def shutdown_raspberry(self, value: bool) -> None:
        self._shutdown_raspberry = value

    # Encoder: RovRpiSwitchData
    def encode(self) -> bytearray:
        data = bytearray(1)
        # [0:1) NormalField: bool shutdown_raspberry[1]
        data[0] = (((((self._shutdown_raspberry >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovRpiSwitchData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool shutdown_raspberry[1]
        self._shutdown_raspberry = (((data[0] & 255) >> 0) << 0)
        return True

# ==================== End RovRpiSwitchData ====================

# ====================== RovModeModeAData ======================

# Struct: RovModeModeAData [6] {6 fields}
class RovModeModeAData:
    def __init__(self):
        # [0:1) NormalField: bool side_push[1]
        self._side_push: bool = False
        # [1:2) NormalField: bool tilt[1]
        self._tilt: bool = False
        # [2:3) NormalField: bool roll[1]
        self._roll: bool = False
        # [3:4) NormalField: bool auxiliary[1]
        self._auxiliary: bool = False
        # [4:5) NormalField: bool rescue[1]
        self._rescue: bool = False
        # [5:6) NormalField: bool module[1]
        self._module: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: side_push
    @property
    def side_push(self) -> bool:
        return self._side_push

    # RawSetter: side_push
    @side_push.setter
    def side_push(self, value: bool) -> None:
        self._side_push = value

    # RawGetter: tilt
    @property
    def tilt(self) -> bool:
        return self._tilt

    # RawSetter: tilt
    @tilt.setter
    def tilt(self, value: bool) -> None:
        self._tilt = value

    # RawGetter: roll
    @property
    def roll(self) -> bool:
        return self._roll

    # RawSetter: roll
    @roll.setter
    def roll(self, value: bool) -> None:
        self._roll = value

    # RawGetter: auxiliary
    @property
    def auxiliary(self) -> bool:
        return self._auxiliary

    # RawSetter: auxiliary
    @auxiliary.setter
    def auxiliary(self, value: bool) -> None:
        self._auxiliary = value

    # RawGetter: rescue
    @property
    def rescue(self) -> bool:
        return self._rescue

    # RawSetter: rescue
    @rescue.setter
    def rescue(self, value: bool) -> None:
        self._rescue = value

    # RawGetter: module
    @property
    def module(self) -> bool:
        return self._module

    # RawSetter: module
    @module.setter
    def module(self, value: bool) -> None:
        self._module = value

    # Encoder: RovModeModeAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool side_push[1]
        data[0] = (((((self._side_push >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool tilt[1]
        data[1] = (((((self._tilt >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool roll[1]
        data[2] = (((((self._roll >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auxiliary[1]
        data[3] = (((((self._auxiliary >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool rescue[1]
        data[4] = (((((self._rescue >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool module[1]
        data[5] = (((((self._module >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovModeModeAData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool side_push[1]
        self._side_push = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool tilt[1]
        self._tilt = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool roll[1]
        self._roll = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auxiliary[1]
        self._auxiliary = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool rescue[1]
        self._rescue = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool module[1]
        self._module = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovModeModeAData ====================

# ====================== RovModeModeBData ======================

# Struct: RovModeModeBData [6] {6 fields}
class RovModeModeBData:
    def __init__(self):
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading: bool = False
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth: bool = False
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize: bool = False
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule: bool = False
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute: bool = False
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: keep_heading
    @property
    def keep_heading(self) -> bool:
        return self._keep_heading

    # RawSetter: keep_heading
    @keep_heading.setter
    def keep_heading(self, value: bool) -> None:
        self._keep_heading = value

    # RawGetter: keep_depth
    @property
    def keep_depth(self) -> bool:
        return self._keep_depth

    # RawSetter: keep_depth
    @keep_depth.setter
    def keep_depth(self, value: bool) -> None:
        self._keep_depth = value

    # RawGetter: auto_stabilize
    @property
    def auto_stabilize(self) -> bool:
        return self._auto_stabilize

    # RawSetter: auto_stabilize
    @auto_stabilize.setter
    def auto_stabilize(self, value: bool) -> None:
        self._auto_stabilize = value

    # RawGetter: auto_schedule
    @property
    def auto_schedule(self) -> bool:
        return self._auto_schedule

    # RawSetter: auto_schedule
    @auto_schedule.setter
    def auto_schedule(self, value: bool) -> None:
        self._auto_schedule = value

    # RawGetter: auto_execute
    @property
    def auto_execute(self) -> bool:
        return self._auto_execute

    # RawSetter: auto_execute
    @auto_execute.setter
    def auto_execute(self, value: bool) -> None:
        self._auto_execute = value

    # RawGetter: auto_avoiding_obstacles
    @property
    def auto_avoiding_obstacles(self) -> bool:
        return self._auto_avoiding_obstacles

    # RawSetter: auto_avoiding_obstacles
    @auto_avoiding_obstacles.setter
    def auto_avoiding_obstacles(self, value: bool) -> None:
        self._auto_avoiding_obstacles = value

    # Encoder: RovModeModeBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool keep_heading[1]
        data[0] = (((((self._keep_heading >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool keep_depth[1]
        data[1] = (((((self._keep_depth >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool auto_stabilize[1]
        data[2] = (((((self._auto_stabilize >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auto_schedule[1]
        data[3] = (((((self._auto_schedule >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool auto_execute[1]
        data[4] = (((((self._auto_execute >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        data[5] = (((((self._auto_avoiding_obstacles >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovModeModeBData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovModeModeBData ====================

# ====================== RovPowerModeBData ======================

# Struct: RovPowerModeBData [6] {6 fields}
class RovPowerModeBData:
    def __init__(self):
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading: bool = False
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth: bool = False
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize: bool = False
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule: bool = False
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute: bool = False
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: keep_heading
    @property
    def keep_heading(self) -> bool:
        return self._keep_heading

    # RawSetter: keep_heading
    @keep_heading.setter
    def keep_heading(self, value: bool) -> None:
        self._keep_heading = value

    # RawGetter: keep_depth
    @property
    def keep_depth(self) -> bool:
        return self._keep_depth

    # RawSetter: keep_depth
    @keep_depth.setter
    def keep_depth(self, value: bool) -> None:
        self._keep_depth = value

    # RawGetter: auto_stabilize
    @property
    def auto_stabilize(self) -> bool:
        return self._auto_stabilize

    # RawSetter: auto_stabilize
    @auto_stabilize.setter
    def auto_stabilize(self, value: bool) -> None:
        self._auto_stabilize = value

    # RawGetter: auto_schedule
    @property
    def auto_schedule(self) -> bool:
        return self._auto_schedule

    # RawSetter: auto_schedule
    @auto_schedule.setter
    def auto_schedule(self, value: bool) -> None:
        self._auto_schedule = value

    # RawGetter: auto_execute
    @property
    def auto_execute(self) -> bool:
        return self._auto_execute

    # RawSetter: auto_execute
    @auto_execute.setter
    def auto_execute(self, value: bool) -> None:
        self._auto_execute = value

    # RawGetter: auto_avoiding_obstacles
    @property
    def auto_avoiding_obstacles(self) -> bool:
        return self._auto_avoiding_obstacles

    # RawSetter: auto_avoiding_obstacles
    @auto_avoiding_obstacles.setter
    def auto_avoiding_obstacles(self, value: bool) -> None:
        self._auto_avoiding_obstacles = value

    # Encoder: RovPowerModeBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool keep_heading[1]
        data[0] = (((((self._keep_heading >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool keep_depth[1]
        data[1] = (((((self._keep_depth >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool auto_stabilize[1]
        data[2] = (((((self._auto_stabilize >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auto_schedule[1]
        data[3] = (((((self._auto_schedule >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool auto_execute[1]
        data[4] = (((((self._auto_execute >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        data[5] = (((((self._auto_avoiding_obstacles >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovPowerModeBData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovPowerModeBData ====================

# ====================== RovCamaraType ======================

# Enum: RovCamaraType [1] {3 values}
class RovCamaraType(Enum):
    NO_CAM = 0
    FRONT_CAM = 1
    BACK_CAM = 2

# ==================== End RovCamaraType ====================

# ====================== RovHostCamaraData ======================

# Struct: RovHostCamaraData [6] {1 fields}
class RovHostCamaraData:
    def __init__(self):
        # [0:6) NormalField: RovCamaraType<6> camara_type[6]
        self._camara_type: List[RovCamaraType] = [None for i in range(6)]

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: camara_type
    @property
    def camara_type(self) -> List[RovCamaraType]:
        return self._camara_type

    # RawSetter: camara_type
    @camara_type.setter
    def camara_type(self, value: List[RovCamaraType]) -> None:
        self._camara_type = value

    # Encoder: RovHostCamaraData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:6) NormalField: RovCamaraType<6> camara_type[6]
        temp_field_at_pos_0 = self._camara_type[0].value
        data[0] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        temp_field_at_pos_0 = self._camara_type[1].value
        data[1] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        temp_field_at_pos_0 = self._camara_type[2].value
        data[2] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        temp_field_at_pos_0 = self._camara_type[3].value
        data[3] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        temp_field_at_pos_0 = self._camara_type[4].value
        data[4] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        temp_field_at_pos_0 = self._camara_type[5].value
        data[5] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovHostCamaraData
    def decode(self, data: bytearray) -> bool:
        # [0:6) NormalField: RovCamaraType<6> camara_type[6]
        temp_field_at_pos_0 = (((data[0] & 255) >> 0) << 0)
        self._camara_type[0] = RovCamaraType(temp_field_at_pos_0)
        temp_field_at_pos_0 = (((data[1] & 255) >> 0) << 0)
        self._camara_type[1] = RovCamaraType(temp_field_at_pos_0)
        temp_field_at_pos_0 = (((data[2] & 255) >> 0) << 0)
        self._camara_type[2] = RovCamaraType(temp_field_at_pos_0)
        temp_field_at_pos_0 = (((data[3] & 255) >> 0) << 0)
        self._camara_type[3] = RovCamaraType(temp_field_at_pos_0)
        temp_field_at_pos_0 = (((data[4] & 255) >> 0) << 0)
        self._camara_type[4] = RovCamaraType(temp_field_at_pos_0)
        temp_field_at_pos_0 = (((data[5] & 255) >> 0) << 0)
        self._camara_type[5] = RovCamaraType(temp_field_at_pos_0)
        return True

# ==================== End RovHostCamaraData ====================

# ====================== RovExdataLeakageData ======================

# Struct: RovExdataLeakageData [6] {1 fields}
class RovExdataLeakageData:
    def __init__(self):
        # [0:6) NormalField: bool<48> leakage[6]
        self._leakage: List[bool] = [False for i in range(48)]

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: leakage
    @property
    def leakage(self) -> List[bool]:
        return self._leakage

    # RawSetter: leakage
    @leakage.setter
    def leakage(self, value: List[bool]) -> None:
        self._leakage = value

    # Encoder: RovExdataLeakageData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:6) NormalField: bool<48> leakage[6]
        data[0] = (((((self._leakage[0] >> 0) & 1) >> 0) << 0) & 1)
        data[0] |= (((((self._leakage[1] >> 0) & 1) >> 0) << 1) & 2)
        data[0] |= (((((self._leakage[2] >> 0) & 1) >> 0) << 2) & 4)
        data[0] |= (((((self._leakage[3] >> 0) & 1) >> 0) << 3) & 8)
        data[0] |= (((((self._leakage[4] >> 0) & 1) >> 0) << 4) & 16)
        data[0] |= (((((self._leakage[5] >> 0) & 1) >> 0) << 5) & 32)
        data[0] |= (((((self._leakage[6] >> 0) & 1) >> 0) << 6) & 64)
        data[0] |= (((((self._leakage[7] >> 0) & 1) >> 0) << 7) & 128)
        data[1] = (((((self._leakage[8] >> 0) & 1) >> 0) << 0) & 1)
        data[1] |= (((((self._leakage[9] >> 0) & 1) >> 0) << 1) & 2)
        data[1] |= (((((self._leakage[10] >> 0) & 1) >> 0) << 2) & 4)
        data[1] |= (((((self._leakage[11] >> 0) & 1) >> 0) << 3) & 8)
        data[1] |= (((((self._leakage[12] >> 0) & 1) >> 0) << 4) & 16)
        data[1] |= (((((self._leakage[13] >> 0) & 1) >> 0) << 5) & 32)
        data[1] |= (((((self._leakage[14] >> 0) & 1) >> 0) << 6) & 64)
        data[1] |= (((((self._leakage[15] >> 0) & 1) >> 0) << 7) & 128)
        data[2] = (((((self._leakage[16] >> 0) & 1) >> 0) << 0) & 1)
        data[2] |= (((((self._leakage[17] >> 0) & 1) >> 0) << 1) & 2)
        data[2] |= (((((self._leakage[18] >> 0) & 1) >> 0) << 2) & 4)
        data[2] |= (((((self._leakage[19] >> 0) & 1) >> 0) << 3) & 8)
        data[2] |= (((((self._leakage[20] >> 0) & 1) >> 0) << 4) & 16)
        data[2] |= (((((self._leakage[21] >> 0) & 1) >> 0) << 5) & 32)
        data[2] |= (((((self._leakage[22] >> 0) & 1) >> 0) << 6) & 64)
        data[2] |= (((((self._leakage[23] >> 0) & 1) >> 0) << 7) & 128)
        data[3] = (((((self._leakage[24] >> 0) & 1) >> 0) << 0) & 1)
        data[3] |= (((((self._leakage[25] >> 0) & 1) >> 0) << 1) & 2)
        data[3] |= (((((self._leakage[26] >> 0) & 1) >> 0) << 2) & 4)
        data[3] |= (((((self._leakage[27] >> 0) & 1) >> 0) << 3) & 8)
        data[3] |= (((((self._leakage[28] >> 0) & 1) >> 0) << 4) & 16)
        data[3] |= (((((self._leakage[29] >> 0) & 1) >> 0) << 5) & 32)
        data[3] |= (((((self._leakage[30] >> 0) & 1) >> 0) << 6) & 64)
        data[3] |= (((((self._leakage[31] >> 0) & 1) >> 0) << 7) & 128)
        data[4] = (((((self._leakage[32] >> 0) & 1) >> 0) << 0) & 1)
        data[4] |= (((((self._leakage[33] >> 0) & 1) >> 0) << 1) & 2)
        data[4] |= (((((self._leakage[34] >> 0) & 1) >> 0) << 2) & 4)
        data[4] |= (((((self._leakage[35] >> 0) & 1) >> 0) << 3) & 8)
        data[4] |= (((((self._leakage[36] >> 0) & 1) >> 0) << 4) & 16)
        data[4] |= (((((self._leakage[37] >> 0) & 1) >> 0) << 5) & 32)
        data[4] |= (((((self._leakage[38] >> 0) & 1) >> 0) << 6) & 64)
        data[4] |= (((((self._leakage[39] >> 0) & 1) >> 0) << 7) & 128)
        data[5] = (((((self._leakage[40] >> 0) & 1) >> 0) << 0) & 1)
        data[5] |= (((((self._leakage[41] >> 0) & 1) >> 0) << 1) & 2)
        data[5] |= (((((self._leakage[42] >> 0) & 1) >> 0) << 2) & 4)
        data[5] |= (((((self._leakage[43] >> 0) & 1) >> 0) << 3) & 8)
        data[5] |= (((((self._leakage[44] >> 0) & 1) >> 0) << 4) & 16)
        data[5] |= (((((self._leakage[45] >> 0) & 1) >> 0) << 5) & 32)
        data[5] |= (((((self._leakage[46] >> 0) & 1) >> 0) << 6) & 64)
        data[5] |= (((((self._leakage[47] >> 0) & 1) >> 0) << 7) & 128)
        return data

    # Decoder: RovExdataLeakageData
    def decode(self, data: bytearray) -> bool:
        # [0:6) NormalField: bool<48> leakage[6]
        self._leakage[0] = (((data[0] & 1) >> 0) << 0)
        self._leakage[1] = (((data[0] & 2) >> 1) << 0)
        self._leakage[2] = (((data[0] & 4) >> 2) << 0)
        self._leakage[3] = (((data[0] & 8) >> 3) << 0)
        self._leakage[4] = (((data[0] & 16) >> 4) << 0)
        self._leakage[5] = (((data[0] & 32) >> 5) << 0)
        self._leakage[6] = (((data[0] & 64) >> 6) << 0)
        self._leakage[7] = (((data[0] & 128) >> 7) << 0)
        self._leakage[8] = (((data[1] & 1) >> 0) << 0)
        self._leakage[9] = (((data[1] & 2) >> 1) << 0)
        self._leakage[10] = (((data[1] & 4) >> 2) << 0)
        self._leakage[11] = (((data[1] & 8) >> 3) << 0)
        self._leakage[12] = (((data[1] & 16) >> 4) << 0)
        self._leakage[13] = (((data[1] & 32) >> 5) << 0)
        self._leakage[14] = (((data[1] & 64) >> 6) << 0)
        self._leakage[15] = (((data[1] & 128) >> 7) << 0)
        self._leakage[16] = (((data[2] & 1) >> 0) << 0)
        self._leakage[17] = (((data[2] & 2) >> 1) << 0)
        self._leakage[18] = (((data[2] & 4) >> 2) << 0)
        self._leakage[19] = (((data[2] & 8) >> 3) << 0)
        self._leakage[20] = (((data[2] & 16) >> 4) << 0)
        self._leakage[21] = (((data[2] & 32) >> 5) << 0)
        self._leakage[22] = (((data[2] & 64) >> 6) << 0)
        self._leakage[23] = (((data[2] & 128) >> 7) << 0)
        self._leakage[24] = (((data[3] & 1) >> 0) << 0)
        self._leakage[25] = (((data[3] & 2) >> 1) << 0)
        self._leakage[26] = (((data[3] & 4) >> 2) << 0)
        self._leakage[27] = (((data[3] & 8) >> 3) << 0)
        self._leakage[28] = (((data[3] & 16) >> 4) << 0)
        self._leakage[29] = (((data[3] & 32) >> 5) << 0)
        self._leakage[30] = (((data[3] & 64) >> 6) << 0)
        self._leakage[31] = (((data[3] & 128) >> 7) << 0)
        self._leakage[32] = (((data[4] & 1) >> 0) << 0)
        self._leakage[33] = (((data[4] & 2) >> 1) << 0)
        self._leakage[34] = (((data[4] & 4) >> 2) << 0)
        self._leakage[35] = (((data[4] & 8) >> 3) << 0)
        self._leakage[36] = (((data[4] & 16) >> 4) << 0)
        self._leakage[37] = (((data[4] & 32) >> 5) << 0)
        self._leakage[38] = (((data[4] & 64) >> 6) << 0)
        self._leakage[39] = (((data[4] & 128) >> 7) << 0)
        self._leakage[40] = (((data[5] & 1) >> 0) << 0)
        self._leakage[41] = (((data[5] & 2) >> 1) << 0)
        self._leakage[42] = (((data[5] & 4) >> 2) << 0)
        self._leakage[43] = (((data[5] & 8) >> 3) << 0)
        self._leakage[44] = (((data[5] & 16) >> 4) << 0)
        self._leakage[45] = (((data[5] & 32) >> 5) << 0)
        self._leakage[46] = (((data[5] & 64) >> 6) << 0)
        self._leakage[47] = (((data[5] & 128) >> 7) << 0)
        return True

# ==================== End RovExdataLeakageData ====================

# ====================== RovExdataKeepAliveStatus ======================

# Enum: RovExdataKeepAliveStatus [2] {2 values}
class RovExdataKeepAliveStatus(Enum):
    HEALTHY = 0
    WATCHDOG_TIMEOUT = 1

# ==================== End RovExdataKeepAliveStatus ====================

# ====================== RovExdataKeepAliveData ======================

# Struct: RovExdataKeepAliveData [6] {2 fields}
class RovExdataKeepAliveData:
    def __init__(self):
        # [0:4) NormalField: uint32 timestamp[4]
        self._timestamp: int = 0
        # [4:6) NormalField: RovExdataKeepAliveStatus status[2]
        self._status: RovExdataKeepAliveStatus = None

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: timestamp
    @property
    def timestamp(self) -> int:
        return self._timestamp

    # RawSetter: timestamp
    @timestamp.setter
    def timestamp(self, value: int) -> None:
        self._timestamp = value

    # RawGetter: status
    @property
    def status(self) -> RovExdataKeepAliveStatus:
        return self._status

    # RawSetter: status
    @status.setter
    def status(self, value: RovExdataKeepAliveStatus) -> None:
        self._status = value

    # Encoder: RovExdataKeepAliveData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:4) NormalField: uint32 timestamp[4]
        data[0] = (((((self._timestamp >> 24) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._timestamp >> 16) & 255) >> 0) << 0) & 255)
        data[2] = (((((self._timestamp >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._timestamp >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: RovExdataKeepAliveStatus status[2]
        temp_field_at_pos_32 = self._status.value
        data[4] = (((((temp_field_at_pos_32 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((temp_field_at_pos_32 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExdataKeepAliveData
    def decode(self, data: bytearray) -> bool:
        # [0:4) NormalField: uint32 timestamp[4]
        self._timestamp = (((data[0] & 255) >> 0) << 24)
        self._timestamp |= (((data[1] & 255) >> 0) << 16)
        self._timestamp |= (((data[2] & 255) >> 0) << 8)
        self._timestamp |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: RovExdataKeepAliveStatus status[2]
        temp_field_at_pos_32 = (((data[4] & 255) >> 0) << 8)
        temp_field_at_pos_32 |= (((data[5] & 255) >> 0) << 0)
        self._status = RovExdataKeepAliveStatus(temp_field_at_pos_32)
        return True

# ==================== End RovExdataKeepAliveData ====================

# ====================== RovExcontrolClampData ======================

# Struct: RovExcontrolClampData [6] {3 fields}
class RovExcontrolClampData:
    def __init__(self):
        # [0:2) NormalField: int16 clamp[2]
        self._clamp: int = 0
        # [2:4) NormalField: int16 wrist[2]
        self._wrist: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: clamp
    @property
    def clamp(self) -> int:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: int) -> None:
        self._clamp = value

    # CustomGetter: wrist_percent
    @property
    def wrist_percent(self) -> float:
        return ((self._wrist / 3000.000000) * 100.000000)

    # CustomSetter: wrist_percent
    @wrist_percent.setter
    def wrist_percent(self, value: float) -> None:
        self._wrist = (0 if ((value > -0.500000) and (value < 0.500000)) else value)

    # CustomGetter: wrist_percent_int
    @property
    def wrist_percent_int(self) -> int:
        return int(((self._wrist / 3000.000000) * 100.000000))

    # RawGetter: wrist
    @property
    def wrist(self) -> int:
        return self._wrist

    # RawSetter: wrist
    @wrist.setter
    def wrist(self, value: int) -> None:
        self._wrist = value

    # Encoder: RovExcontrolClampData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: int16 clamp[2]
        data[0] = (((((self._clamp >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: int16 wrist[2]
        data[2] = (((((self._wrist >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._wrist >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovExcontrolClampData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: int16 clamp[2]
        self._clamp = (((data[0] & 255) >> 0) << 8)
        self._clamp |= (((data[1] & 255) >> 0) << 0)
        self._clamp = ((self._clamp) ^ 32768) - 32768
        # [2:4) NormalField: int16 wrist[2]
        self._wrist = (((data[2] & 255) >> 0) << 8)
        self._wrist |= (((data[3] & 255) >> 0) << 0)
        self._wrist = ((self._wrist) ^ 32768) - 32768
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovExcontrolClampData ====================

# ====================== RovExcontrolArmAData ======================

# Struct: RovExcontrolArmAData [6] {3 fields}
class RovExcontrolArmAData:
    def __init__(self):
        # [0:2) NormalField: uint16 a1[2]
        self._a1: int = 0
        # [2:4) NormalField: uint16 a2[2]
        self._a2: int = 0
        # [4:6) NormalField: uint16 a3[2]
        self._a3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: a1
    @property
    def a1(self) -> int:
        return self._a1

    # RawSetter: a1
    @a1.setter
    def a1(self, value: int) -> None:
        self._a1 = value

    # RawGetter: a2
    @property
    def a2(self) -> int:
        return self._a2

    # RawSetter: a2
    @a2.setter
    def a2(self, value: int) -> None:
        self._a2 = value

    # RawGetter: a3
    @property
    def a3(self) -> int:
        return self._a3

    # RawSetter: a3
    @a3.setter
    def a3(self, value: int) -> None:
        self._a3 = value

    # Encoder: RovExcontrolArmAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 a1[2]
        data[0] = (((((self._a1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._a1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 a2[2]
        data[2] = (((((self._a2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._a2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 a3[2]
        data[4] = (((((self._a3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._a3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 a1[2]
        self._a1 = (((data[0] & 255) >> 0) << 8)
        self._a1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 a2[2]
        self._a2 = (((data[2] & 255) >> 0) << 8)
        self._a2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 a3[2]
        self._a3 = (((data[4] & 255) >> 0) << 8)
        self._a3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmAData ====================

# ====================== RovExcontrolArmBData ======================

# Struct: RovExcontrolArmBData [6] {3 fields}
class RovExcontrolArmBData:
    def __init__(self):
        # [0:2) NormalField: uint16 b1[2]
        self._b1: int = 0
        # [2:4) NormalField: uint16 b2[2]
        self._b2: int = 0
        # [4:6) NormalField: uint16 b3[2]
        self._b3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: b1
    @property
    def b1(self) -> int:
        return self._b1

    # RawSetter: b1
    @b1.setter
    def b1(self, value: int) -> None:
        self._b1 = value

    # RawGetter: b2
    @property
    def b2(self) -> int:
        return self._b2

    # RawSetter: b2
    @b2.setter
    def b2(self, value: int) -> None:
        self._b2 = value

    # RawGetter: b3
    @property
    def b3(self) -> int:
        return self._b3

    # RawSetter: b3
    @b3.setter
    def b3(self, value: int) -> None:
        self._b3 = value

    # Encoder: RovExcontrolArmBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 b1[2]
        data[0] = (((((self._b1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._b1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 b2[2]
        data[2] = (((((self._b2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._b2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 b3[2]
        data[4] = (((((self._b3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._b3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 b1[2]
        self._b1 = (((data[0] & 255) >> 0) << 8)
        self._b1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 b2[2]
        self._b2 = (((data[2] & 255) >> 0) << 8)
        self._b2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 b3[2]
        self._b3 = (((data[4] & 255) >> 0) << 8)
        self._b3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmBData ====================

# ====================== RovExcontrolArmCData ======================

# Struct: RovExcontrolArmCData [6] {3 fields}
class RovExcontrolArmCData:
    def __init__(self):
        # [0:2) NormalField: uint16 c1[2]
        self._c1: int = 0
        # [2:4) NormalField: uint16 c2[2]
        self._c2: int = 0
        # [4:6) NormalField: uint16 c3[2]
        self._c3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: c1
    @property
    def c1(self) -> int:
        return self._c1

    # RawSetter: c1
    @c1.setter
    def c1(self, value: int) -> None:
        self._c1 = value

    # RawGetter: c2
    @property
    def c2(self) -> int:
        return self._c2

    # RawSetter: c2
    @c2.setter
    def c2(self, value: int) -> None:
        self._c2 = value

    # RawGetter: c3
    @property
    def c3(self) -> int:
        return self._c3

    # RawSetter: c3
    @c3.setter
    def c3(self, value: int) -> None:
        self._c3 = value

    # Encoder: RovExcontrolArmCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 c1[2]
        data[0] = (((((self._c1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._c1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 c2[2]
        data[2] = (((((self._c2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._c2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 c3[2]
        data[4] = (((((self._c3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._c3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 c1[2]
        self._c1 = (((data[0] & 255) >> 0) << 8)
        self._c1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 c2[2]
        self._c2 = (((data[2] & 255) >> 0) << 8)
        self._c2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 c3[2]
        self._c3 = (((data[4] & 255) >> 0) << 8)
        self._c3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmCData ====================

# ====================== RovExcomponentRelayData ======================

# Struct: RovExcomponentRelayData [6] {6 fields}
class RovExcomponentRelayData:
    def __init__(self):
        # [0:1) NormalField: bool lazer[1]
        self._lazer: bool = False
        # [1:2) NormalField: bool clamp[1]
        self._clamp: bool = False
        # [2:3) NormalField: bool arm[1]
        self._arm: bool = False
        # [3:4) NormalField: bool sonar[1]
        self._sonar: bool = False
        # [4:5) NormalField: bool propeller[1]
        self._propeller: bool = False
        # [5:6) NormalField: bool ptz[1]
        self._ptz: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: lazer
    @property
    def lazer(self) -> bool:
        return self._lazer

    # RawSetter: lazer
    @lazer.setter
    def lazer(self, value: bool) -> None:
        self._lazer = value

    # RawGetter: clamp
    @property
    def clamp(self) -> bool:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: bool) -> None:
        self._clamp = value

    # RawGetter: arm
    @property
    def arm(self) -> bool:
        return self._arm

    # RawSetter: arm
    @arm.setter
    def arm(self, value: bool) -> None:
        self._arm = value

    # RawGetter: sonar
    @property
    def sonar(self) -> bool:
        return self._sonar

    # RawSetter: sonar
    @sonar.setter
    def sonar(self, value: bool) -> None:
        self._sonar = value

    # RawGetter: propeller
    @property
    def propeller(self) -> bool:
        return self._propeller

    # RawSetter: propeller
    @propeller.setter
    def propeller(self, value: bool) -> None:
        self._propeller = value

    # RawGetter: ptz
    @property
    def ptz(self) -> bool:
        return self._ptz

    # RawSetter: ptz
    @ptz.setter
    def ptz(self, value: bool) -> None:
        self._ptz = value

    # Encoder: RovExcomponentRelayData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool lazer[1]
        data[0] = (((((self._lazer >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool clamp[1]
        data[1] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool arm[1]
        data[2] = (((((self._arm >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool sonar[1]
        data[3] = (((((self._sonar >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool propeller[1]
        data[4] = (((((self._propeller >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool ptz[1]
        data[5] = (((((self._ptz >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcomponentRelayData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool lazer[1]
        self._lazer = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool clamp[1]
        self._clamp = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool arm[1]
        self._arm = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool sonar[1]
        self._sonar = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool propeller[1]
        self._propeller = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool ptz[1]
        self._ptz = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcomponentRelayData ====================

# ====================== RovExcomponentRescueData ======================

# Struct: RovExcomponentRescueData [6] {6 fields}
class RovExcomponentRescueData:
    def __init__(self):
        # [0:1) NormalField: uint8 stretch[1]
        self._stretch: int = 0
        # [1:2) NormalField: uint8 left_servo[1]
        self._left_servo: int = 0
        # [2:3) NormalField: uint8 right_servo[1]
        self._right_servo: int = 0
        # [3:4) NormalField: uint8 clamp[1]
        self._clamp: int = 0
        # [4:5) NormalField: uint8 turn_servo[1]
        self._turn_servo: int = 0
        # [5:6) NormalField: uint8 solution[1]
        self._solution: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: stretch
    @property
    def stretch(self) -> int:
        return self._stretch

    # RawSetter: stretch
    @stretch.setter
    def stretch(self, value: int) -> None:
        self._stretch = value

    # RawGetter: left_servo
    @property
    def left_servo(self) -> int:
        return self._left_servo

    # RawSetter: left_servo
    @left_servo.setter
    def left_servo(self, value: int) -> None:
        self._left_servo = value

    # RawGetter: right_servo
    @property
    def right_servo(self) -> int:
        return self._right_servo

    # RawSetter: right_servo
    @right_servo.setter
    def right_servo(self, value: int) -> None:
        self._right_servo = value

    # RawGetter: clamp
    @property
    def clamp(self) -> int:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: int) -> None:
        self._clamp = value

    # RawGetter: turn_servo
    @property
    def turn_servo(self) -> int:
        return self._turn_servo

    # RawSetter: turn_servo
    @turn_servo.setter
    def turn_servo(self, value: int) -> None:
        self._turn_servo = value

    # RawGetter: solution
    @property
    def solution(self) -> int:
        return self._solution

    # RawSetter: solution
    @solution.setter
    def solution(self, value: int) -> None:
        self._solution = value

    # Encoder: RovExcomponentRescueData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: uint8 stretch[1]
        data[0] = (((((self._stretch >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: uint8 left_servo[1]
        data[1] = (((((self._left_servo >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: uint8 right_servo[1]
        data[2] = (((((self._right_servo >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: uint8 clamp[1]
        data[3] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: uint8 turn_servo[1]
        data[4] = (((((self._turn_servo >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: uint8 solution[1]
        data[5] = (((((self._solution >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcomponentRescueData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: uint8 stretch[1]
        self._stretch = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: uint8 left_servo[1]
        self._left_servo = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: uint8 right_servo[1]
        self._right_servo = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: uint8 clamp[1]
        self._clamp = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: uint8 turn_servo[1]
        self._turn_servo = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: uint8 solution[1]
        self._solution = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcomponentRescueData ====================

# ====================== RovControlPropellerAData ======================

# Struct: RovControlPropellerAData [6] {3 fields}
class RovControlPropellerAData:
    def __init__(self):
        # [0:2) NormalField: uint16 a1[2]
        self._a1: int = 0
        # [2:4) NormalField: uint16 a2[2]
        self._a2: int = 0
        # [4:6) NormalField: uint16 a3[2]
        self._a3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: a1
    @property
    def a1(self) -> int:
        return self._a1

    # RawSetter: a1
    @a1.setter
    def a1(self, value: int) -> None:
        self._a1 = value

    # RawGetter: a2
    @property
    def a2(self) -> int:
        return self._a2

    # RawSetter: a2
    @a2.setter
    def a2(self, value: int) -> None:
        self._a2 = value

    # RawGetter: a3
    @property
    def a3(self) -> int:
        return self._a3

    # RawSetter: a3
    @a3.setter
    def a3(self, value: int) -> None:
        self._a3 = value

    # Encoder: RovControlPropellerAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 a1[2]
        data[0] = (((((self._a1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._a1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 a2[2]
        data[2] = (((((self._a2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._a2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 a3[2]
        data[4] = (((((self._a3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._a3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 a1[2]
        self._a1 = (((data[0] & 255) >> 0) << 8)
        self._a1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 a2[2]
        self._a2 = (((data[2] & 255) >> 0) << 8)
        self._a2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 a3[2]
        self._a3 = (((data[4] & 255) >> 0) << 8)
        self._a3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerAData ====================

# ====================== RovControlPropellerBData ======================

# Struct: RovControlPropellerBData [6] {3 fields}
class RovControlPropellerBData:
    def __init__(self):
        # [0:2) NormalField: uint16 b1[2]
        self._b1: int = 0
        # [2:4) NormalField: uint16 b2[2]
        self._b2: int = 0
        # [4:6) NormalField: uint16 b3[2]
        self._b3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: b1
    @property
    def b1(self) -> int:
        return self._b1

    # RawSetter: b1
    @b1.setter
    def b1(self, value: int) -> None:
        self._b1 = value

    # RawGetter: b2
    @property
    def b2(self) -> int:
        return self._b2

    # RawSetter: b2
    @b2.setter
    def b2(self, value: int) -> None:
        self._b2 = value

    # RawGetter: b3
    @property
    def b3(self) -> int:
        return self._b3

    # RawSetter: b3
    @b3.setter
    def b3(self, value: int) -> None:
        self._b3 = value

    # Encoder: RovControlPropellerBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 b1[2]
        data[0] = (((((self._b1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._b1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 b2[2]
        data[2] = (((((self._b2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._b2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 b3[2]
        data[4] = (((((self._b3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._b3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 b1[2]
        self._b1 = (((data[0] & 255) >> 0) << 8)
        self._b1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 b2[2]
        self._b2 = (((data[2] & 255) >> 0) << 8)
        self._b2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 b3[2]
        self._b3 = (((data[4] & 255) >> 0) << 8)
        self._b3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerBData ====================

# ====================== RovControlPropellerCData ======================

# Struct: RovControlPropellerCData [6] {3 fields}
class RovControlPropellerCData:
    def __init__(self):
        # [0:2) NormalField: uint16 c1[2]
        self._c1: int = 0
        # [2:4) NormalField: uint16 c2[2]
        self._c2: int = 0
        # [4:6) NormalField: uint16 c3[2]
        self._c3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: c1
    @property
    def c1(self) -> int:
        return self._c1

    # RawSetter: c1
    @c1.setter
    def c1(self, value: int) -> None:
        self._c1 = value

    # RawGetter: c2
    @property
    def c2(self) -> int:
        return self._c2

    # RawSetter: c2
    @c2.setter
    def c2(self, value: int) -> None:
        self._c2 = value

    # RawGetter: c3
    @property
    def c3(self) -> int:
        return self._c3

    # RawSetter: c3
    @c3.setter
    def c3(self, value: int) -> None:
        self._c3 = value

    # Encoder: RovControlPropellerCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 c1[2]
        data[0] = (((((self._c1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._c1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 c2[2]
        data[2] = (((((self._c2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._c2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 c3[2]
        data[4] = (((((self._c3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._c3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 c1[2]
        self._c1 = (((data[0] & 255) >> 0) << 8)
        self._c1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 c2[2]
        self._c2 = (((data[2] & 255) >> 0) << 8)
        self._c2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 c3[2]
        self._c3 = (((data[4] & 255) >> 0) << 8)
        self._c3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerCData ====================

# ====================== RovControlPropellerDData ======================

# Struct: RovControlPropellerDData [6] {3 fields}
class RovControlPropellerDData:
    def __init__(self):
        # [0:2) NormalField: uint16 d1[2]
        self._d1: int = 0
        # [2:4) NormalField: uint16 d2[2]
        self._d2: int = 0
        # [4:6) NormalField: uint16 d3[2]
        self._d3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: d1
    @property
    def d1(self) -> int:
        return self._d1

    # RawSetter: d1
    @d1.setter
    def d1(self, value: int) -> None:
        self._d1 = value

    # RawGetter: d2
    @property
    def d2(self) -> int:
        return self._d2

    # RawSetter: d2
    @d2.setter
    def d2(self, value: int) -> None:
        self._d2 = value

    # RawGetter: d3
    @property
    def d3(self) -> int:
        return self._d3

    # RawSetter: d3
    @d3.setter
    def d3(self, value: int) -> None:
        self._d3 = value

    # Encoder: RovControlPropellerDData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 d1[2]
        data[0] = (((((self._d1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._d1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 d2[2]
        data[2] = (((((self._d2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._d2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 d3[2]
        data[4] = (((((self._d3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._d3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerDData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 d1[2]
        self._d1 = (((data[0] & 255) >> 0) << 8)
        self._d1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 d2[2]
        self._d2 = (((data[2] & 255) >> 0) << 8)
        self._d2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 d3[2]
        self._d3 = (((data[4] & 255) >> 0) << 8)
        self._d3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerDData ====================

# ====================== RovControlLightAData ======================

# Struct: RovControlLightAData [6] {3 fields}
class RovControlLightAData:
    def __init__(self):
        # [0:2) NormalField: uint16 l1[2]
        self._l1: int = 0
        # [2:4) NormalField: uint16 l2[2]
        self._l2: int = 0
        # [4:6) NormalField: uint16 l3[2]
        self._l3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: l1_percent
    @property
    def l1_percent(self) -> float:
        return ((self._l1 / 20000.000000) * 100.000000)

    # CustomGetter: l1_percent_int
    @property
    def l1_percent_int(self) -> int:
        return int((((self._l1 / 20000.000000) * 100.000000) + 0.500000))

    # CustomSetter: l1_percent_int
    @l1_percent_int.setter
    def l1_percent_int(self, value: float) -> None:
        self._l1 = (0 if (value < 0.500000) else value)

    # RawGetter: l1
    @property
    def l1(self) -> int:
        return self._l1

    # RawSetter: l1
    @l1.setter
    def l1(self, value: int) -> None:
        self._l1 = value

    # CustomGetter: l2_percent
    @property
    def l2_percent(self) -> float:
        return ((self._l2 / 20000.000000) * 100.000000)

    # CustomSetter: l2_percent
    @l2_percent.setter
    def l2_percent(self, value: float) -> None:
        self._l2 = (0 if (value < 0.500000) else value)

    # CustomGetter: l2_percent_int
    @property
    def l2_percent_int(self) -> int:
        return int((((self._l2 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l2
    @property
    def l2(self) -> int:
        return self._l2

    # RawSetter: l2
    @l2.setter
    def l2(self, value: int) -> None:
        self._l2 = value

    # CustomGetter: l3_percent
    @property
    def l3_percent(self) -> float:
        return ((self._l3 / 20000.000000) * 100.000000)

    # CustomSetter: l3_percent
    @l3_percent.setter
    def l3_percent(self, value: float) -> None:
        self._l3 = (0 if (value < 0.500000) else value)

    # CustomGetter: l3_percent_int
    @property
    def l3_percent_int(self) -> int:
        return int((((self._l3 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l3
    @property
    def l3(self) -> int:
        return self._l3

    # RawSetter: l3
    @l3.setter
    def l3(self, value: int) -> None:
        self._l3 = value

    # Encoder: RovControlLightAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 l1[2]
        data[0] = (((((self._l1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._l1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 l2[2]
        data[2] = (((((self._l2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._l2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 l3[2]
        data[4] = (((((self._l3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._l3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlLightAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 l1[2]
        self._l1 = (((data[0] & 255) >> 0) << 8)
        self._l1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 l2[2]
        self._l2 = (((data[2] & 255) >> 0) << 8)
        self._l2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 l3[2]
        self._l3 = (((data[4] & 255) >> 0) << 8)
        self._l3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlLightAData ====================

# ====================== RovControlLightBData ======================

# Struct: RovControlLightBData [6] {3 fields}
class RovControlLightBData:
    def __init__(self):
        # [0:2) NormalField: uint16 l4[2]
        self._l4: int = 0
        # [2:4) NormalField: uint16 l5[2]
        self._l5: int = 0
        # [4:6) NormalField: uint16 l6[2]
        self._l6: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: l4_percent
    @property
    def l4_percent(self) -> float:
        return ((self._l4 / 20000.000000) * 100.000000)

    # CustomSetter: l4_percent
    @l4_percent.setter
    def l4_percent(self, value: float) -> None:
        self._l4 = (0 if (value < 0.500000) else value)

    # CustomGetter: l4_percent_int
    @property
    def l4_percent_int(self) -> int:
        return int((((self._l4 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l4
    @property
    def l4(self) -> int:
        return self._l4

    # RawSetter: l4
    @l4.setter
    def l4(self, value: int) -> None:
        self._l4 = value

    # CustomGetter: l5_percent
    @property
    def l5_percent(self) -> float:
        return ((self._l5 / 20000.000000) * 100.000000)

    # CustomSetter: l5_percent
    @l5_percent.setter
    def l5_percent(self, value: float) -> None:
        self._l5 = (0 if (value < 0.500000) else value)

    # CustomGetter: l5_percent_int
    @property
    def l5_percent_int(self) -> int:
        return int((((self._l5 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l5
    @property
    def l5(self) -> int:
        return self._l5

    # RawSetter: l5
    @l5.setter
    def l5(self, value: int) -> None:
        self._l5 = value

    # CustomGetter: l6_percent
    @property
    def l6_percent(self) -> float:
        return ((self._l6 / 20000.000000) * 100.000000)

    # CustomSetter: l6_percent
    @l6_percent.setter
    def l6_percent(self, value: float) -> None:
        self._l6 = (0 if (value < 0.500000) else value)

    # CustomGetter: l6_percent_int
    @property
    def l6_percent_int(self) -> int:
        return int((((self._l6 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l6
    @property
    def l6(self) -> int:
        return self._l6

    # RawSetter: l6
    @l6.setter
    def l6(self, value: int) -> None:
        self._l6 = value

    # Encoder: RovControlLightBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 l4[2]
        data[0] = (((((self._l4 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._l4 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 l5[2]
        data[2] = (((((self._l5 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._l5 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 l6[2]
        data[4] = (((((self._l6 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._l6 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlLightBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 l4[2]
        self._l4 = (((data[0] & 255) >> 0) << 8)
        self._l4 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 l5[2]
        self._l5 = (((data[2] & 255) >> 0) << 8)
        self._l5 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 l6[2]
        self._l6 = (((data[4] & 255) >> 0) << 8)
        self._l6 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlLightBData ====================

# ====================== RovControlPtzData ======================

# Struct: RovControlPtzData [6] {3 fields}
class RovControlPtzData:
    def __init__(self):
        # [0:2) NormalField: uint16 th1[2]
        self._th1: int = 0
        # [2:4) NormalField: uint16 th2[2]
        self._th2: int = 0
        # [4:6) NormalField: uint16 th3[2]
        self._th3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: th1_angle
    @property
    def th1_angle(self) -> float:
        return (((int(self._th1) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th1_angle_int
    @property
    def th1_angle_int(self) -> int:
        return int(((((int(self._th1) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th1
    @property
    def th1(self) -> int:
        return self._th1

    # RawSetter: th1
    @th1.setter
    def th1(self, value: int) -> None:
        self._th1 = value

    # CustomGetter: th2_angle
    @property
    def th2_angle(self) -> float:
        return (((int(self._th2) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th2_angle_int
    @property
    def th2_angle_int(self) -> int:
        return int(((((int(self._th2) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th2
    @property
    def th2(self) -> int:
        return self._th2

    # RawSetter: th2
    @th2.setter
    def th2(self, value: int) -> None:
        self._th2 = value

    # CustomGetter: th3_angle
    @property
    def th3_angle(self) -> float:
        return (((int(self._th3) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th3_angle_int
    @property
    def th3_angle_int(self) -> int:
        return int(((((int(self._th3) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th3
    @property
    def th3(self) -> int:
        return self._th3

    # RawSetter: th3
    @th3.setter
    def th3(self, value: int) -> None:
        self._th3 = value

    # Encoder: RovControlPtzData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 th1[2]
        data[0] = (((((self._th1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._th1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 th2[2]
        data[2] = (((((self._th2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._th2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 th3[2]
        data[4] = (((((self._th3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._th3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPtzData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 th1[2]
        self._th1 = (((data[0] & 255) >> 0) << 8)
        self._th1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 th2[2]
        self._th2 = (((data[2] & 255) >> 0) << 8)
        self._th2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 th3[2]
        self._th3 = (((data[4] & 255) >> 0) << 8)
        self._th3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPtzData ====================

# ====================== RovControlServoAData ======================

# Struct: RovControlServoAData [6] {3 fields}
class RovControlServoAData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm1[2]
        self._pwm1: int = 0
        # [2:4) NormalField: uint16 pwm2[2]
        self._pwm2: int = 0
        # [4:6) NormalField: uint16 pwm3[2]
        self._pwm3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm1
    @property
    def pwm1(self) -> int:
        return self._pwm1

    # RawSetter: pwm1
    @pwm1.setter
    def pwm1(self, value: int) -> None:
        self._pwm1 = value

    # RawGetter: pwm2
    @property
    def pwm2(self) -> int:
        return self._pwm2

    # RawSetter: pwm2
    @pwm2.setter
    def pwm2(self, value: int) -> None:
        self._pwm2 = value

    # RawGetter: pwm3
    @property
    def pwm3(self) -> int:
        return self._pwm3

    # RawSetter: pwm3
    @pwm3.setter
    def pwm3(self, value: int) -> None:
        self._pwm3 = value

    # Encoder: RovControlServoAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm1[2]
        data[0] = (((((self._pwm1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm2[2]
        data[2] = (((((self._pwm2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm3[2]
        data[4] = (((((self._pwm3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm1[2]
        self._pwm1 = (((data[0] & 255) >> 0) << 8)
        self._pwm1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm2[2]
        self._pwm2 = (((data[2] & 255) >> 0) << 8)
        self._pwm2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm3[2]
        self._pwm3 = (((data[4] & 255) >> 0) << 8)
        self._pwm3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoAData ====================

# ====================== RovControlServoBData ======================

# Struct: RovControlServoBData [6] {3 fields}
class RovControlServoBData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm4[2]
        self._pwm4: int = 0
        # [2:4) NormalField: uint16 pwm5[2]
        self._pwm5: int = 0
        # [4:6) NormalField: uint16 pwm6[2]
        self._pwm6: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm4
    @property
    def pwm4(self) -> int:
        return self._pwm4

    # RawSetter: pwm4
    @pwm4.setter
    def pwm4(self, value: int) -> None:
        self._pwm4 = value

    # RawGetter: pwm5
    @property
    def pwm5(self) -> int:
        return self._pwm5

    # RawSetter: pwm5
    @pwm5.setter
    def pwm5(self, value: int) -> None:
        self._pwm5 = value

    # RawGetter: pwm6
    @property
    def pwm6(self) -> int:
        return self._pwm6

    # RawSetter: pwm6
    @pwm6.setter
    def pwm6(self, value: int) -> None:
        self._pwm6 = value

    # Encoder: RovControlServoBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm4[2]
        data[0] = (((((self._pwm4 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm4 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm5[2]
        data[2] = (((((self._pwm5 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm5 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm6[2]
        data[4] = (((((self._pwm6 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm6 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm4[2]
        self._pwm4 = (((data[0] & 255) >> 0) << 8)
        self._pwm4 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm5[2]
        self._pwm5 = (((data[2] & 255) >> 0) << 8)
        self._pwm5 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm6[2]
        self._pwm6 = (((data[4] & 255) >> 0) << 8)
        self._pwm6 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoBData ====================

# ====================== RovControlServoCData ======================

# Struct: RovControlServoCData [6] {3 fields}
class RovControlServoCData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm7[2]
        self._pwm7: int = 0
        # [2:4) NormalField: uint16 pwm8[2]
        self._pwm8: int = 0
        # [4:6) NormalField: uint16 pwm9[2]
        self._pwm9: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm7
    @property
    def pwm7(self) -> int:
        return self._pwm7

    # RawSetter: pwm7
    @pwm7.setter
    def pwm7(self, value: int) -> None:
        self._pwm7 = value

    # RawGetter: pwm8
    @property
    def pwm8(self) -> int:
        return self._pwm8

    # RawSetter: pwm8
    @pwm8.setter
    def pwm8(self, value: int) -> None:
        self._pwm8 = value

    # RawGetter: pwm9
    @property
    def pwm9(self) -> int:
        return self._pwm9

    # RawSetter: pwm9
    @pwm9.setter
    def pwm9(self, value: int) -> None:
        self._pwm9 = value

    # Encoder: RovControlServoCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm7[2]
        data[0] = (((((self._pwm7 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm7 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm8[2]
        data[2] = (((((self._pwm8 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm8 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm9[2]
        data[4] = (((((self._pwm9 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm9 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm7[2]
        self._pwm7 = (((data[0] & 255) >> 0) << 8)
        self._pwm7 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm8[2]
        self._pwm8 = (((data[2] & 255) >> 0) << 8)
        self._pwm8 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm9[2]
        self._pwm9 = (((data[4] & 255) >> 0) << 8)
        self._pwm9 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoCData ====================

# ====================== RovControlPostureData ======================

# Struct: RovControlPostureData [6] {3 fields}
class RovControlPostureData:
    def __init__(self):
        # [0:2) NormalField: uint16 forward_backward[2]
        self._forward_backward: int = 0
        # [2:4) NormalField: uint16 left_right[2]
        self._left_right: int = 0
        # [4:6) NormalField: uint16 up_down[2]
        self._up_down: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: forward_backward_percent
    @property
    def forward_backward_percent(self) -> float:
        return (((int(self._forward_backward) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: forward_backward_percent
    @forward_backward_percent.setter
    def forward_backward_percent(self, value: float) -> None:
        self._forward_backward = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: forward_backward_percent_int
    @property
    def forward_backward_percent_int(self) -> int:
        return int(((((int(self._forward_backward) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: forward_backward
    @property
    def forward_backward(self) -> int:
        return self._forward_backward

    # RawSetter: forward_backward
    @forward_backward.setter
    def forward_backward(self, value: int) -> None:
        self._forward_backward = value

    # CustomGetter: left_right_percent
    @property
    def left_right_percent(self) -> float:
        return (((int(self._left_right) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: left_right_percent
    @left_right_percent.setter
    def left_right_percent(self, value: float) -> None:
        self._left_right = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: left_right_percent_int
    @property
    def left_right_percent_int(self) -> int:
        return int(((((int(self._left_right) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: left_right
    @property
    def left_right(self) -> int:
        return self._left_right

    # RawSetter: left_right
    @left_right.setter
    def left_right(self, value: int) -> None:
        self._left_right = value

    # CustomGetter: up_down_percent
    @property
    def up_down_percent(self) -> float:
        return (((int(self._up_down) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: up_down_percent
    @up_down_percent.setter
    def up_down_percent(self, value: float) -> None:
        self._up_down = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: up_down_percent_int
    @property
    def up_down_percent_int(self) -> int:
        return int(((((int(self._up_down) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: up_down
    @property
    def up_down(self) -> int:
        return self._up_down

    # RawSetter: up_down
    @up_down.setter
    def up_down(self, value: int) -> None:
        self._up_down = value

    # Encoder: RovControlPostureData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 forward_backward[2]
        data[0] = (((((self._forward_backward >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._forward_backward >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 left_right[2]
        data[2] = (((((self._left_right >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._left_right >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 up_down[2]
        data[4] = (((((self._up_down >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._up_down >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPostureData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 forward_backward[2]
        self._forward_backward = (((data[0] & 255) >> 0) << 8)
        self._forward_backward |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 left_right[2]
        self._left_right = (((data[2] & 255) >> 0) << 8)
        self._left_right |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 up_down[2]
        self._up_down = (((data[4] & 255) >> 0) << 8)
        self._up_down |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPostureData ====================

# ====================== RovSensorCabTempHumidPressData ======================

# Struct: RovSensorCabTempHumidPressData [6] {3 fields}
class RovSensorCabTempHumidPressData:
    def __init__(self):
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature: int = 0
        # [2:4) NormalField: uint16 humidity[2]
        self._humidity: int = 0
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: temperature_display
    @property
    def temperature_display(self) -> float:
        return (self._temperature / 100.000000)

    # CustomSetter: temperature_display
    @temperature_display.setter
    def temperature_display(self, value: float) -> None:
        self._temperature = int((value * 100.000000))

    # RawGetter: temperature
    @property
    def temperature(self) -> int:
        return self._temperature

    # RawSetter: temperature
    @temperature.setter
    def temperature(self, value: int) -> None:
        self._temperature = value

    # CustomGetter: humidity_display
    @property
    def humidity_display(self) -> float:
        return (self._humidity / 100.000000)

    # CustomSetter: humidity_display
    @humidity_display.setter
    def humidity_display(self, value: float) -> None:
        self._humidity = int((value * 100.000000))

    # RawGetter: humidity
    @property
    def humidity(self) -> int:
        return self._humidity

    # RawSetter: humidity
    @humidity.setter
    def humidity(self, value: int) -> None:
        self._humidity = value

    # CustomGetter: pressure_display
    @property
    def pressure_display(self) -> float:
        return (self._pressure / 100.000000)

    # CustomSetter: pressure_display
    @pressure_display.setter
    def pressure_display(self, value: float) -> None:
        self._pressure = int((value * 100.000000))

    # RawGetter: pressure
    @property
    def pressure(self) -> int:
        return self._pressure

    # RawSetter: pressure
    @pressure.setter
    def pressure(self, value: int) -> None:
        self._pressure = value

    # Encoder: RovSensorCabTempHumidPressData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 temperature[2]
        data[0] = (((((self._temperature >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._temperature >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 humidity[2]
        data[2] = (((((self._humidity >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._humidity >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pressure[2]
        data[4] = (((((self._pressure >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pressure >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorCabTempHumidPressData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature = (((data[0] & 255) >> 0) << 8)
        self._temperature |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 humidity[2]
        self._humidity = (((data[2] & 255) >> 0) << 8)
        self._humidity |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure = (((data[4] & 255) >> 0) << 8)
        self._pressure |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorCabTempHumidPressData ====================

# ====================== RovSensorWaterTempDepthPressData ======================

# Struct: RovSensorWaterTempDepthPressData [6] {3 fields}
class RovSensorWaterTempDepthPressData:
    def __init__(self):
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature: int = 0
        # [2:4) NormalField: uint16 depth[2]
        self._depth: int = 0
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: temperature_display
    @property
    def temperature_display(self) -> float:
        return (self._temperature / 100.000000)

    # CustomSetter: temperature_display
    @temperature_display.setter
    def temperature_display(self, value: float) -> None:
        self._temperature = int((value * 100.000000))

    # RawGetter: temperature
    @property
    def temperature(self) -> int:
        return self._temperature

    # RawSetter: temperature
    @temperature.setter
    def temperature(self, value: int) -> None:
        self._temperature = value

    # CustomGetter: trustable
    @property
    def trustable(self) -> bool:
        return (False if ((self._depth / 100.000000) < 1.000000) else True)

    # CustomGetter: confidence
    @property
    def confidence(self) -> int:
        return (0 if ((self._depth / 100.000000) < 1.000000) else 100)

    # CustomGetter: depth_display
    @property
    def depth_display(self) -> float:
        return (self._depth / 100.000000)

    # CustomSetter: depth_display
    @depth_display.setter
    def depth_display(self, value: float) -> None:
        self._depth = int((value * 100.000000))

    # RawGetter: depth
    @property
    def depth(self) -> int:
        return self._depth

    # RawSetter: depth
    @depth.setter
    def depth(self, value: int) -> None:
        self._depth = value

    # CustomGetter: pressure_display
    @property
    def pressure_display(self) -> float:
        return (self._pressure / 100.000000)

    # CustomSetter: pressure_display
    @pressure_display.setter
    def pressure_display(self, value: float) -> None:
        self._pressure = int((value * 100.000000))

    # RawGetter: pressure
    @property
    def pressure(self) -> int:
        return self._pressure

    # RawSetter: pressure
    @pressure.setter
    def pressure(self, value: int) -> None:
        self._pressure = value

    # Encoder: RovSensorWaterTempDepthPressData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 temperature[2]
        data[0] = (((((self._temperature >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._temperature >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 depth[2]
        data[2] = (((((self._depth >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._depth >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pressure[2]
        data[4] = (((((self._pressure >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pressure >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorWaterTempDepthPressData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature = (((data[0] & 255) >> 0) << 8)
        self._temperature |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 depth[2]
        self._depth = (((data[2] & 255) >> 0) << 8)
        self._depth |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure = (((data[4] & 255) >> 0) << 8)
        self._pressure |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorWaterTempDepthPressData ====================

# ====================== RovSensorAccelerationData ======================

# Struct: RovSensorAccelerationData [6] {3 fields}
class RovSensorAccelerationData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return (((self._x / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return (((self._y / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return (((self._z / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorAccelerationData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorAccelerationData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorAccelerationData ====================

# ====================== RovSensorAngularVelocityData ======================

# Struct: RovSensorAngularVelocityData [6] {3 fields}
class RovSensorAngularVelocityData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return ((self._x / 32768.000000) * 2000.000000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return ((self._y / 32768.000000) * 2000.000000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return ((self._z / 32768.000000) * 2000.000000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorAngularVelocityData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorAngularVelocityData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorAngularVelocityData ====================

# ====================== RovSensorEulerAngleData ======================

# Struct: RovSensorEulerAngleData [6] {3 fields}
class RovSensorEulerAngleData:
    def __init__(self):
        # [0:2) NormalField: int16 pitch[2]
        self._pitch: int = 0
        # [2:4) NormalField: int16 roll[2]
        self._roll: int = 0
        # [4:6) NormalField: uint16 yaw[2]
        self._yaw: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: pitch_display
    @property
    def pitch_display(self) -> float:
        return float(self._pitch)

    # CustomSetter: pitch_display
    @pitch_display.setter
    def pitch_display(self, value: float) -> None:
        self._pitch = int(value)

    # RawGetter: pitch
    @property
    def pitch(self) -> int:
        return self._pitch

    # RawSetter: pitch
    @pitch.setter
    def pitch(self, value: int) -> None:
        self._pitch = value

    # CustomGetter: roll_display
    @property
    def roll_display(self) -> float:
        return float(self._roll)

    # CustomSetter: roll_display
    @roll_display.setter
    def roll_display(self, value: float) -> None:
        self._roll = int(value)

    # RawGetter: roll
    @property
    def roll(self) -> int:
        return self._roll

    # RawSetter: roll
    @roll.setter
    def roll(self, value: int) -> None:
        self._roll = value

    # CustomGetter: yaw_display
    @property
    def yaw_display(self) -> float:
        return float(((self._yaw + 180) % 360))

    # CustomSetter: yaw_display
    @yaw_display.setter
    def yaw_display(self, value: float) -> None:
        self._yaw = int(((int(value) + 180) % 360))

    # RawGetter: yaw
    @property
    def yaw(self) -> int:
        return self._yaw

    # RawSetter: yaw
    @yaw.setter
    def yaw(self, value: int) -> None:
        self._yaw = value

    # Encoder: RovSensorEulerAngleData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: int16 pitch[2]
        data[0] = (((((self._pitch >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pitch >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: int16 roll[2]
        data[2] = (((((self._roll >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._roll >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 yaw[2]
        data[4] = (((((self._yaw >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._yaw >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorEulerAngleData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: int16 pitch[2]
        self._pitch = (((data[0] & 255) >> 0) << 8)
        self._pitch |= (((data[1] & 255) >> 0) << 0)
        self._pitch = ((self._pitch) ^ 32768) - 32768
        # [2:4) NormalField: int16 roll[2]
        self._roll = (((data[2] & 255) >> 0) << 8)
        self._roll |= (((data[3] & 255) >> 0) << 0)
        self._roll = ((self._roll) ^ 32768) - 32768
        # [4:6) NormalField: uint16 yaw[2]
        self._yaw = (((data[4] & 255) >> 0) << 8)
        self._yaw |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorEulerAngleData ====================

# ====================== RovSensorMagneticFieldData ======================

# Struct: RovSensorMagneticFieldData [6] {3 fields}
class RovSensorMagneticFieldData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return ((self._x / 32768.000000) * 4912.000000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return ((self._y / 32768.000000) * 4912.000000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return ((self._z / 32768.000000) * 4912.000000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorMagneticFieldData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorMagneticFieldData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorMagneticFieldData ====================

# ====================== RovSensorHeightSonarData ======================

# Struct: RovSensorHeightSonarData [6] {3 fields}
class RovSensorHeightSonarData:
    def __init__(self):
        # [0:2) NormalField: uint16 height[2]
        self._height: int = 0
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: height_display
    @property
    def height_display(self) -> float:
        return (self._height / 100.000000)

    # CustomSetter: height_display
    @height_display.setter
    def height_display(self, value: float) -> None:
        self._height = int((value * 100.000000))

    # RawGetter: height
    @property
    def height(self) -> int:
        return self._height

    # RawSetter: height
    @height.setter
    def height(self, value: int) -> None:
        self._height = value

    # CustomGetter: trustable
    @property
    def trustable(self) -> bool:
        return (False if ((self._confidence / 100.000000) <= 95) else True)

    # CustomGetter: confidence_display
    @property
    def confidence_display(self) -> float:
        return (self._confidence / 100.000000)

    # CustomSetter: confidence_display
    @confidence_display.setter
    def confidence_display(self, value: float) -> None:
        self._confidence = int((value * 100.000000))

    # RawGetter: confidence
    @property
    def confidence(self) -> int:
        return self._confidence

    # RawSetter: confidence
    @confidence.setter
    def confidence(self, value: int) -> None:
        self._confidence = value

    # Encoder: RovSensorHeightSonarData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 height[2]
        data[0] = (((((self._height >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._height >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 confidence[2]
        data[2] = (((((self._confidence >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._confidence >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovSensorHeightSonarData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 height[2]
        self._height = (((data[0] & 255) >> 0) << 8)
        self._height |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence = (((data[2] & 255) >> 0) << 8)
        self._confidence |= (((data[3] & 255) >> 0) << 0)
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovSensorHeightSonarData ====================

# ====================== RovSensorDistanceSonarData ======================

# Struct: RovSensorDistanceSonarData [6] {3 fields}
class RovSensorDistanceSonarData:
    def __init__(self):
        # [0:2) NormalField: uint16 distance[2]
        self._distance: int = 0
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: distance_display
    @property
    def distance_display(self) -> float:
        return (self._distance / 100.000000)

    # CustomSetter: distance_display
    @distance_display.setter
    def distance_display(self, value: float) -> None:
        self._distance = int((value * 100.000000))

    # RawGetter: distance
    @property
    def distance(self) -> int:
        return self._distance

    # RawSetter: distance
    @distance.setter
    def distance(self, value: int) -> None:
        self._distance = value

    # CustomGetter: confidence_display
    @property
    def confidence_display(self) -> float:
        return (self._confidence / 100.000000)

    # CustomSetter: confidence_display
    @confidence_display.setter
    def confidence_display(self, value: float) -> None:
        self._confidence = int((value * 100.000000))

    # RawGetter: confidence
    @property
    def confidence(self) -> int:
        return self._confidence

    # RawSetter: confidence
    @confidence.setter
    def confidence(self, value: int) -> None:
        self._confidence = value

    # Encoder: RovSensorDistanceSonarData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 distance[2]
        data[0] = (((((self._distance >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._distance >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 confidence[2]
        data[2] = (((((self._confidence >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._confidence >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovSensorDistanceSonarData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 distance[2]
        self._distance = (((data[0] & 255) >> 0) << 8)
        self._distance |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence = (((data[2] & 255) >> 0) << 8)
        self._confidence |= (((data[3] & 255) >> 0) << 0)
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovSensorDistanceSonarData ====================

# ====================== RovDeviceType ======================

# Enum: RovDeviceType [1] {6 values}
class RovDeviceType(Enum):
    NONE = 0
    POWER_CAB = 1
    CONTROL_CAB = 2
    COMM_CAB = 3
    MAIN_CAB = 4
    HOST = 5

# ==================== End RovDeviceType ====================

# ====================== RovlinkFrameType ======================

# Enum: RovlinkFrameType [1] {53 values}
class RovlinkFrameType(Enum):
    SENSOR_NONE = 0
    SENSOR_CAB_TEMP_HUMID_PRESS = 1
    SENSOR_WATER_TEMP_DEPTH_PRESS = 2
    SENSOR_ACCELERATION = 3
    SENSOR_ANGULAR_VELOCITY = 4
    SENSOR_EULER_ANGLE = 5
    SENSOR_MAGNETIC_FIELD = 6
    SENSOR_HEIGHT_SONAR = 7
    SENSOR_DISTANCE_SONAR = 8
    EXDATA_LEAKAGE = 16
    EXDATA_KEEP_ALIVE = 17
    CONTROL_PROPELLER_A = 33
    CONTROL_PROPELLER_B = 34
    CONTROL_PROPELLER_C = 35
    CONTROL_PROPELLER_D = 36
    CONTROL_LIGHT_A = 37
    CONTROL_LIGHT_B = 38
    CONTROL_PTZ = 39
    CONTROL_SERVO_A = 40
    CONTROL_SERVO_B = 41
    CONTROL_SERVO_C = 42
    CONTROL_POSTURE = 43
    HOST_CAMARA = 49
    ALGORITHM_PID_KP = 65
    ALGORITHM_PID_KI = 66
    ALGORITHM_PID_KD = 67
    COMPONENT_PROPELLER = 81
    COMPONENT_LIGHT = 82
    COMPONENT_PTZ = 83
    COMPONENT_SERVO_A = 84
    COMPONENT_SERVO_B = 85
    EXCOMPONENT_RELAY = 97
    EXCOMPONENT_RESCUE = 98
    MODE_MODE_A = 113
    MODE_MODE_B = 114
    EXCONTROL_CLAMP = 129
    EXCONTROL_ARM_A = 130
    EXCONTROL_ARM_B = 131
    EXCONTROL_ARM_C = 132
    BETTERY_VOLTAGE = 160
    BETTERY_CURRENT_GAIN = 161
    BETTERY_CURRENT_BIAS = 162
    BETTERY_CURRENT = 163
    BETTERY_REMAIN = 164
    CURRENT_PROPELLER_A = 176
    CURRENT_PROPELLER_B = 177
    CURRENT_PROPELLER_C = 178
    CURRENT_PROPELLER_D = 179
    CURRENT_PTZ = 180
    CURRENT_SERVO_A = 181
    CURRENT_SERVO_B = 182
    EXTRASWITCH_SONAR_P30 = 192
    EXTRASWITCH_RPI = 193

# ==================== End RovlinkFrameType ====================

# ====================== RovlinkFrame ======================

# Struct: RovlinkFrame [8] {6 fields}
class RovlinkFrame:
    def __init__(self):
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        self._opcode: RovlinkFrameType = None
        # [1:1#1) NormalField: bool sensor[#1]
        self._sensor: bool = False
        # [1#1:1#2) NormalField: bool valid[#1]
        self._valid: bool = False
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        self._device: RovDeviceType = None
        # [2:8) NormalField: uint8<6> payload[6]
        self._payload: List[int] = [0 for i in range(6)]

    @staticmethod
    def size() -> int:
        return 8

    # RawGetter: opcode
    @property
    def opcode(self) -> RovlinkFrameType:
        return self._opcode

    # RawSetter: opcode
    @opcode.setter
    def opcode(self, value: RovlinkFrameType) -> None:
        self._opcode = value

    # RawGetter: sensor
    @property
    def sensor(self) -> bool:
        return self._sensor

    # RawSetter: sensor
    @sensor.setter
    def sensor(self, value: bool) -> None:
        self._sensor = value

    # RawGetter: valid
    @property
    def valid(self) -> bool:
        return self._valid

    # RawSetter: valid
    @valid.setter
    def valid(self, value: bool) -> None:
        self._valid = value

    # RawGetter: device
    @property
    def device(self) -> RovDeviceType:
        return self._device

    # RawSetter: device
    @device.setter
    def device(self, value: RovDeviceType) -> None:
        self._device = value

    # RawGetter: payload
    @property
    def payload(self) -> List[int]:
        return self._payload

    # RawSetter: payload
    @payload.setter
    def payload(self, value: List[int]) -> None:
        self._payload = value

    # Encoder: RovlinkFrame
    def encode(self) -> bytearray:
        data = bytearray(8)
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_0 = self._opcode.value
        data[0] = (((((temp_field_at_pos_0 >> 0) & 255) >> 0) << 0) & 255)
        # [1:1#1) NormalField: bool sensor[#1]
        data[1] = (((((self._sensor >> 0) & 1) >> 0) << 0) & 1)
        # [1#1:1#2) NormalField: bool valid[#1]
        data[1] |= (((((self._valid >> 0) & 1) >> 0) << 1) & 2)
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_12 = self._device.value
        data[1] |= (((((temp_field_at_pos_12 >> 0) & 15) >> 0) << 4) & 240)
        # [2:8) NormalField: uint8<6> payload[6]
        data[2] = (((((self._payload[0] >> 0) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._payload[1] >> 0) & 255) >> 0) << 0) & 255)
        data[4] = (((((self._payload[2] >> 0) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._payload[3] >> 0) & 255) >> 0) << 0) & 255)
        data[6] = (((((self._payload[4] >> 0) & 255) >> 0) << 0) & 255)
        data[7] = (((((self._payload[5] >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovlinkFrame
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_0 = (((data[0] & 255) >> 0) << 0)
        self._opcode = RovlinkFrameType(temp_field_at_pos_0)
        # [1:1#1) NormalField: bool sensor[#1]
        self._sensor = (((data[1] & 1) >> 0) << 0)
        # [1#1:1#2) NormalField: bool valid[#1]
        self._valid = (((data[1] & 2) >> 1) << 0)
        # [1#2:1#4) VoidField: void [#2]
        # [1#4:2) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_12 = (((data[1] & 240) >> 4) << 0)
        self._device = RovDeviceType(temp_field_at_pos_12)
        # [2:8) NormalField: uint8<6> payload[6]
        self._payload[0] = (((data[2] & 255) >> 0) << 0)
        self._payload[1] = (((data[3] & 255) >> 0) << 0)
        self._payload[2] = (((data[4] & 255) >> 0) << 0)
        self._payload[3] = (((data[5] & 255) >> 0) << 0)
        self._payload[4] = (((data[6] & 255) >> 0) << 0)
        self._payload[5] = (((data[7] & 255) >> 0) << 0)
        return True

# ==================== End RovlinkFrame ====================

# ====================== RovlinkFullFrame ======================

# Struct: RovlinkFullFrame [10] {9 fields}
class RovlinkFullFrame:
    def __init__(self):
        # [0:1) NormalField: uint8 header[1]
        self._header: int = 0
        # [virtual] EmbeddedField: RovlinkFrame [8]
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        self._opcode: RovlinkFrameType = None
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor: bool = False
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid: bool = False
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        self._device: RovDeviceType = None
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload: List[int] = [0 for i in range(6)]
        # [9:10) NormalField: uint8 crc[1]
        self._crc: int = 0

    @staticmethod
    def size() -> int:
        return 10

    # RawGetter: header
    @property
    def header(self) -> int:
        return self._header

    # RawSetter: header
    @header.setter
    def header(self, value: int) -> None:
        self._header = value

    # RawGetter: opcode
    @property
    def opcode(self) -> RovlinkFrameType:
        return self._opcode

    # RawSetter: opcode
    @opcode.setter
    def opcode(self, value: RovlinkFrameType) -> None:
        self._opcode = value

    # RawGetter: sensor
    @property
    def sensor(self) -> bool:
        return self._sensor

    # RawSetter: sensor
    @sensor.setter
    def sensor(self, value: bool) -> None:
        self._sensor = value

    # RawGetter: valid
    @property
    def valid(self) -> bool:
        return self._valid

    # RawSetter: valid
    @valid.setter
    def valid(self, value: bool) -> None:
        self._valid = value

    # RawGetter: device
    @property
    def device(self) -> RovDeviceType:
        return self._device

    # RawSetter: device
    @device.setter
    def device(self, value: RovDeviceType) -> None:
        self._device = value

    # RawGetter: payload
    @property
    def payload(self) -> List[int]:
        return self._payload

    # RawSetter: payload
    @payload.setter
    def payload(self, value: List[int]) -> None:
        self._payload = value

    # RawGetter: crc
    @property
    def crc(self) -> int:
        return self._crc

    # RawSetter: crc
    @crc.setter
    def crc(self, value: int) -> None:
        self._crc = value

    # Encoder: RovlinkFullFrame
    def encode(self) -> bytearray:
        data = bytearray(10)
        # [0:1) NormalField: uint8 header[1]
        data[0] = (((((self._header >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = self._opcode.value
        data[1] = (((((temp_field_at_pos_8 >> 0) & 255) >> 0) << 0) & 255)
        # [2:2#1) NormalField: bool sensor[#1]
        data[2] = (((((self._sensor >> 0) & 1) >> 0) << 0) & 1)
        # [2#1:2#2) NormalField: bool valid[#1]
        data[2] |= (((((self._valid >> 0) & 1) >> 0) << 1) & 2)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = self._device.value
        data[2] |= (((((temp_field_at_pos_20 >> 0) & 15) >> 0) << 4) & 240)
        # [3:9) NormalField: uint8<6> payload[6]
        data[3] = (((((self._payload[0] >> 0) & 255) >> 0) << 0) & 255)
        data[4] = (((((self._payload[1] >> 0) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._payload[2] >> 0) & 255) >> 0) << 0) & 255)
        data[6] = (((((self._payload[3] >> 0) & 255) >> 0) << 0) & 255)
        data[7] = (((((self._payload[4] >> 0) & 255) >> 0) << 0) & 255)
        data[8] = (((((self._payload[5] >> 0) & 255) >> 0) << 0) & 255)
        # [9:10) NormalField: uint8 crc[1]
        data[9] = (((((self._crc >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovlinkFullFrame
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: uint8 header[1]
        self._header = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = (((data[1] & 255) >> 0) << 0)
        self._opcode = RovlinkFrameType(temp_field_at_pos_8)
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor = (((data[2] & 1) >> 0) << 0)
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid = (((data[2] & 2) >> 1) << 0)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = (((data[2] & 240) >> 4) << 0)
        self._device = RovDeviceType(temp_field_at_pos_20)
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload[0] = (((data[3] & 255) >> 0) << 0)
        self._payload[1] = (((data[4] & 255) >> 0) << 0)
        self._payload[2] = (((data[5] & 255) >> 0) << 0)
        self._payload[3] = (((data[6] & 255) >> 0) << 0)
        self._payload[4] = (((data[7] & 255) >> 0) << 0)
        self._payload[5] = (((data[8] & 255) >> 0) << 0)
        # [9:10) NormalField: uint8 crc[1]
        self._crc = (((data[9] & 255) >> 0) << 0)
        return True

# ==================== End RovlinkFullFrame ====================


class RovlinkFullFrameDebug:
    def __init__(self):
        # [0:1) NormalField: uint8 header[1]
        self._header: int = 0
        # [virtual] EmbeddedField: RovlinkFrame [8]
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        self._opcode: RovlinkFrameType = None
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor: bool = False
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid: bool = False
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        self._device: RovDeviceType = None
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload: List[int] = [0 for i in range(6)]
        # [9:10) NormalField: uint8 crc[1]
        self._crc: int = 0

    @staticmethod
    def size() -> int:
        return 10

    # RawGetter: header
    @property
    def header(self) -> int:
        return self._header

    # RawSetter: header
    @header.setter
    def header(self, value: int) -> None:
        self._header = value

    # RawGetter: opcode
    @property
    def opcode(self) -> RovlinkFrameType:
        return self._opcode

    # RawSetter: opcode
    @opcode.setter
    def opcode(self, value: RovlinkFrameType) -> None:
        self._opcode = value

    # RawGetter: sensor
    @property
    def sensor(self) -> bool:
        return self._sensor

    # RawSetter: sensor
    @sensor.setter
    def sensor(self, value: bool) -> None:
        self._sensor = value

    # RawGetter: valid
    @property
    def valid(self) -> bool:
        return self._valid

    # RawSetter: valid
    @valid.setter
    def valid(self, value: bool) -> None:
        self._valid = value

    # RawGetter: device
    @property
    def device(self) -> RovDeviceType:
        return self._device

    # RawSetter: device
    @device.setter
    def device(self, value: RovDeviceType) -> None:
        self._device = value

    # RawGetter: payload
    @property
    def payload(self) -> List[int]:
        return self._payload

    # RawSetter: payload
    @payload.setter
    def payload(self, value: List[int]) -> None:
        self._payload = value

    # RawGetter: crc
    @property
    def crc(self) -> int:
        return self._crc

    # RawSetter: crc
    @crc.setter
    def crc(self, value: int) -> None:
        self._crc = value

    # Encoder: RovlinkFullFrame
    def encode(self) -> bytearray:
        data = bytearray(10)
        # [0:1) NormalField: uint8 header[1]
        data[0] = (((((self._header >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = self._opcode.value
        data[1] = (((((temp_field_at_pos_8 >> 0) & 255) >> 0) << 0) & 255)
        # [2:2#1) NormalField: bool sensor[#1]
        data[2] = (((((self._sensor >> 0) & 1) >> 0) << 0) & 1)
        # [2#1:2#2) NormalField: bool valid[#1]
        data[2] |= (((((self._valid >> 0) & 1) >> 0) << 1) & 2)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = self._device.value
        data[2] |= (((((temp_field_at_pos_20 >> 0) & 15) >> 0) << 4) & 240)
        # [3:9) NormalField: uint8<6> payload[6]
        data[3] = (((((self._payload[0] >> 0) & 255) >> 0) << 0) & 255)
        data[4] = (((((self._payload[1] >> 0) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._payload[2] >> 0) & 255) >> 0) << 0) & 255)
        data[6] = (((((self._payload[3] >> 0) & 255) >> 0) << 0) & 255)
        data[7] = (((((self._payload[4] >> 0) & 255) >> 0) << 0) & 255)
        data[8] = (((((self._payload[5] >> 0) & 255) >> 0) << 0) & 255)
        # [9:10) NormalField: uint8 crc[1]
        data[9] = (((((self._crc >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovlinkFullFrame
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: uint8 header[1]
        self._header = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: RovlinkFrameType opcode[1]
        temp_field_at_pos_8 = (((data[1] & 255) >> 0) << 0)
        self._opcode = RovlinkFrameType(temp_field_at_pos_8)
        print(self._opcode)
        # [2:2#1) NormalField: bool sensor[#1]
        self._sensor = (((data[2] & 1) >> 0) << 0)
        # [2#1:2#2) NormalField: bool valid[#1]
        self._valid = (((data[2] & 2) >> 1) << 0)
        # [2#2:2#4) VoidField: void [#2]
        # [2#4:3) NormalField: RovDeviceType device[#4]
        temp_field_at_pos_20 = (((data[2] & 240) >> 4) << 0)
        self._device = RovDeviceType(temp_field_at_pos_20)
        # [3:9) NormalField: uint8<6> payload[6]
        self._payload[0] = (((data[3] & 255) >> 0) << 0)
        self._payload[1] = (((data[4] & 255) >> 0) << 0)
        self._payload[2] = (((data[5] & 255) >> 0) << 0)
        self._payload[3] = (((data[6] & 255) >> 0) << 0)
        self._payload[4] = (((data[7] & 255) >> 0) << 0)
        self._payload[5] = (((data[8] & 255) >> 0) << 0)
        # [9:10) NormalField: uint8 crc[1]
        self._crc = (((data[9] & 255) >> 0) << 0)
        return True

