# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovControlPropellerAData ======================

# Struct: RovControlPropellerAData [6] {3 fields}
class RovControlPropellerAData:
    def __init__(self):
        # [0:2) NormalField: uint16 a1[2]
        self._a1: int = 0
        # [2:4) NormalField: uint16 a2[2]
        self._a2: int = 0
        # [4:6) NormalField: uint16 a3[2]
        self._a3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: a1
    @property
    def a1(self) -> int:
        return self._a1

    # RawSetter: a1
    @a1.setter
    def a1(self, value: int) -> None:
        self._a1 = value

    # RawGetter: a2
    @property
    def a2(self) -> int:
        return self._a2

    # RawSetter: a2
    @a2.setter
    def a2(self, value: int) -> None:
        self._a2 = value

    # RawGetter: a3
    @property
    def a3(self) -> int:
        return self._a3

    # RawSetter: a3
    @a3.setter
    def a3(self, value: int) -> None:
        self._a3 = value

    # Encoder: RovControlPropellerAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 a1[2]
        data[0] = (((((self._a1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._a1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 a2[2]
        data[2] = (((((self._a2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._a2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 a3[2]
        data[4] = (((((self._a3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._a3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 a1[2]
        self._a1 = (((data[0] & 255) >> 0) << 8)
        self._a1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 a2[2]
        self._a2 = (((data[2] & 255) >> 0) << 8)
        self._a2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 a3[2]
        self._a3 = (((data[4] & 255) >> 0) << 8)
        self._a3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerAData ====================

# ====================== RovControlPropellerBData ======================

# Struct: RovControlPropellerBData [6] {3 fields}
class RovControlPropellerBData:
    def __init__(self):
        # [0:2) NormalField: uint16 b1[2]
        self._b1: int = 0
        # [2:4) NormalField: uint16 b2[2]
        self._b2: int = 0
        # [4:6) NormalField: uint16 b3[2]
        self._b3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: b1
    @property
    def b1(self) -> int:
        return self._b1

    # RawSetter: b1
    @b1.setter
    def b1(self, value: int) -> None:
        self._b1 = value

    # RawGetter: b2
    @property
    def b2(self) -> int:
        return self._b2

    # RawSetter: b2
    @b2.setter
    def b2(self, value: int) -> None:
        self._b2 = value

    # RawGetter: b3
    @property
    def b3(self) -> int:
        return self._b3

    # RawSetter: b3
    @b3.setter
    def b3(self, value: int) -> None:
        self._b3 = value

    # Encoder: RovControlPropellerBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 b1[2]
        data[0] = (((((self._b1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._b1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 b2[2]
        data[2] = (((((self._b2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._b2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 b3[2]
        data[4] = (((((self._b3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._b3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 b1[2]
        self._b1 = (((data[0] & 255) >> 0) << 8)
        self._b1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 b2[2]
        self._b2 = (((data[2] & 255) >> 0) << 8)
        self._b2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 b3[2]
        self._b3 = (((data[4] & 255) >> 0) << 8)
        self._b3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerBData ====================

# ====================== RovControlPropellerCData ======================

# Struct: RovControlPropellerCData [6] {3 fields}
class RovControlPropellerCData:
    def __init__(self):
        # [0:2) NormalField: uint16 c1[2]
        self._c1: int = 0
        # [2:4) NormalField: uint16 c2[2]
        self._c2: int = 0
        # [4:6) NormalField: uint16 c3[2]
        self._c3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: c1
    @property
    def c1(self) -> int:
        return self._c1

    # RawSetter: c1
    @c1.setter
    def c1(self, value: int) -> None:
        self._c1 = value

    # RawGetter: c2
    @property
    def c2(self) -> int:
        return self._c2

    # RawSetter: c2
    @c2.setter
    def c2(self, value: int) -> None:
        self._c2 = value

    # RawGetter: c3
    @property
    def c3(self) -> int:
        return self._c3

    # RawSetter: c3
    @c3.setter
    def c3(self, value: int) -> None:
        self._c3 = value

    # Encoder: RovControlPropellerCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 c1[2]
        data[0] = (((((self._c1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._c1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 c2[2]
        data[2] = (((((self._c2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._c2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 c3[2]
        data[4] = (((((self._c3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._c3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 c1[2]
        self._c1 = (((data[0] & 255) >> 0) << 8)
        self._c1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 c2[2]
        self._c2 = (((data[2] & 255) >> 0) << 8)
        self._c2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 c3[2]
        self._c3 = (((data[4] & 255) >> 0) << 8)
        self._c3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerCData ====================

# ====================== RovControlPropellerDData ======================

# Struct: RovControlPropellerDData [6] {3 fields}
class RovControlPropellerDData:
    def __init__(self):
        # [0:2) NormalField: uint16 d1[2]
        self._d1: int = 0
        # [2:4) NormalField: uint16 d2[2]
        self._d2: int = 0
        # [4:6) NormalField: uint16 d3[2]
        self._d3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: d1
    @property
    def d1(self) -> int:
        return self._d1

    # RawSetter: d1
    @d1.setter
    def d1(self, value: int) -> None:
        self._d1 = value

    # RawGetter: d2
    @property
    def d2(self) -> int:
        return self._d2

    # RawSetter: d2
    @d2.setter
    def d2(self, value: int) -> None:
        self._d2 = value

    # RawGetter: d3
    @property
    def d3(self) -> int:
        return self._d3

    # RawSetter: d3
    @d3.setter
    def d3(self, value: int) -> None:
        self._d3 = value

    # Encoder: RovControlPropellerDData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 d1[2]
        data[0] = (((((self._d1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._d1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 d2[2]
        data[2] = (((((self._d2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._d2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 d3[2]
        data[4] = (((((self._d3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._d3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPropellerDData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 d1[2]
        self._d1 = (((data[0] & 255) >> 0) << 8)
        self._d1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 d2[2]
        self._d2 = (((data[2] & 255) >> 0) << 8)
        self._d2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 d3[2]
        self._d3 = (((data[4] & 255) >> 0) << 8)
        self._d3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPropellerDData ====================

# ====================== RovControlLightAData ======================

# Struct: RovControlLightAData [6] {3 fields}
class RovControlLightAData:
    def __init__(self):
        # [0:2) NormalField: uint16 l1[2]
        self._l1: int = 0
        # [2:4) NormalField: uint16 l2[2]
        self._l2: int = 0
        # [4:6) NormalField: uint16 l3[2]
        self._l3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: l1_percent
    @property
    def l1_percent(self) -> float:
        return ((self._l1 / 20000.000000) * 100.000000)

    # CustomGetter: l1_percent_int
    @property
    def l1_percent_int(self) -> int:
        return int((((self._l1 / 20000.000000) * 100.000000) + 0.500000))

    # CustomSetter: l1_percent_int
    @l1_percent_int.setter
    def l1_percent_int(self, value: float) -> None:
        self._l1 = (0 if (value < 0.500000) else value)

    # RawGetter: l1
    @property
    def l1(self) -> int:
        return self._l1

    # RawSetter: l1
    @l1.setter
    def l1(self, value: int) -> None:
        self._l1 = value

    # CustomGetter: l2_percent
    @property
    def l2_percent(self) -> float:
        return ((self._l2 / 20000.000000) * 100.000000)

    # CustomSetter: l2_percent
    @l2_percent.setter
    def l2_percent(self, value: float) -> None:
        self._l2 = (0 if (value < 0.500000) else value)

    # CustomGetter: l2_percent_int
    @property
    def l2_percent_int(self) -> int:
        return int((((self._l2 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l2
    @property
    def l2(self) -> int:
        return self._l2

    # RawSetter: l2
    @l2.setter
    def l2(self, value: int) -> None:
        self._l2 = value

    # CustomGetter: l3_percent
    @property
    def l3_percent(self) -> float:
        return ((self._l3 / 20000.000000) * 100.000000)

    # CustomSetter: l3_percent
    @l3_percent.setter
    def l3_percent(self, value: float) -> None:
        self._l3 = (0 if (value < 0.500000) else value)

    # CustomGetter: l3_percent_int
    @property
    def l3_percent_int(self) -> int:
        return int((((self._l3 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l3
    @property
    def l3(self) -> int:
        return self._l3

    # RawSetter: l3
    @l3.setter
    def l3(self, value: int) -> None:
        self._l3 = value

    # Encoder: RovControlLightAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 l1[2]
        data[0] = (((((self._l1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._l1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 l2[2]
        data[2] = (((((self._l2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._l2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 l3[2]
        data[4] = (((((self._l3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._l3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlLightAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 l1[2]
        self._l1 = (((data[0] & 255) >> 0) << 8)
        self._l1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 l2[2]
        self._l2 = (((data[2] & 255) >> 0) << 8)
        self._l2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 l3[2]
        self._l3 = (((data[4] & 255) >> 0) << 8)
        self._l3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlLightAData ====================

# ====================== RovControlLightBData ======================

# Struct: RovControlLightBData [6] {3 fields}
class RovControlLightBData:
    def __init__(self):
        # [0:2) NormalField: uint16 l4[2]
        self._l4: int = 0
        # [2:4) NormalField: uint16 l5[2]
        self._l5: int = 0
        # [4:6) NormalField: uint16 l6[2]
        self._l6: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: l4_percent
    @property
    def l4_percent(self) -> float:
        return ((self._l4 / 20000.000000) * 100.000000)

    # CustomSetter: l4_percent
    @l4_percent.setter
    def l4_percent(self, value: float) -> None:
        self._l4 = (0 if (value < 0.500000) else value)

    # CustomGetter: l4_percent_int
    @property
    def l4_percent_int(self) -> int:
        return int((((self._l4 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l4
    @property
    def l4(self) -> int:
        return self._l4

    # RawSetter: l4
    @l4.setter
    def l4(self, value: int) -> None:
        self._l4 = value

    # CustomGetter: l5_percent
    @property
    def l5_percent(self) -> float:
        return ((self._l5 / 20000.000000) * 100.000000)

    # CustomSetter: l5_percent
    @l5_percent.setter
    def l5_percent(self, value: float) -> None:
        self._l5 = (0 if (value < 0.500000) else value)

    # CustomGetter: l5_percent_int
    @property
    def l5_percent_int(self) -> int:
        return int((((self._l5 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l5
    @property
    def l5(self) -> int:
        return self._l5

    # RawSetter: l5
    @l5.setter
    def l5(self, value: int) -> None:
        self._l5 = value

    # CustomGetter: l6_percent
    @property
    def l6_percent(self) -> float:
        return ((self._l6 / 20000.000000) * 100.000000)

    # CustomSetter: l6_percent
    @l6_percent.setter
    def l6_percent(self, value: float) -> None:
        self._l6 = (0 if (value < 0.500000) else value)

    # CustomGetter: l6_percent_int
    @property
    def l6_percent_int(self) -> int:
        return int((((self._l6 / 20000.000000) * 100.000000) + 0.500000))

    # RawGetter: l6
    @property
    def l6(self) -> int:
        return self._l6

    # RawSetter: l6
    @l6.setter
    def l6(self, value: int) -> None:
        self._l6 = value

    # Encoder: RovControlLightBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 l4[2]
        data[0] = (((((self._l4 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._l4 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 l5[2]
        data[2] = (((((self._l5 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._l5 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 l6[2]
        data[4] = (((((self._l6 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._l6 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlLightBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 l4[2]
        self._l4 = (((data[0] & 255) >> 0) << 8)
        self._l4 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 l5[2]
        self._l5 = (((data[2] & 255) >> 0) << 8)
        self._l5 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 l6[2]
        self._l6 = (((data[4] & 255) >> 0) << 8)
        self._l6 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlLightBData ====================

# ====================== RovControlPtzData ======================

# Struct: RovControlPtzData [6] {3 fields}
class RovControlPtzData:
    def __init__(self):
        # [0:2) NormalField: uint16 th1[2]
        self._th1: int = 0
        # [2:4) NormalField: uint16 th2[2]
        self._th2: int = 0
        # [4:6) NormalField: uint16 th3[2]
        self._th3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: th1_angle
    @property
    def th1_angle(self) -> float:
        return (((int(self._th1) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th1_angle_int
    @property
    def th1_angle_int(self) -> int:
        return int(((((int(self._th1) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th1
    @property
    def th1(self) -> int:
        return self._th1

    # RawSetter: th1
    @th1.setter
    def th1(self, value: int) -> None:
        self._th1 = value

    # CustomGetter: th2_angle
    @property
    def th2_angle(self) -> float:
        return (((int(self._th2) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th2_angle_int
    @property
    def th2_angle_int(self) -> int:
        return int(((((int(self._th2) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th2
    @property
    def th2(self) -> int:
        return self._th2

    # RawSetter: th2
    @th2.setter
    def th2(self, value: int) -> None:
        self._th2 = value

    # CustomGetter: th3_angle
    @property
    def th3_angle(self) -> float:
        return (((int(self._th3) - 1500.000000) / 1000.000000) * 166.000000)

    # CustomGetter: th3_angle_int
    @property
    def th3_angle_int(self) -> int:
        return int(((((int(self._th3) - 1500.000000) / 1000.000000) * 166.000000) + 0.500000))

    # RawGetter: th3
    @property
    def th3(self) -> int:
        return self._th3

    # RawSetter: th3
    @th3.setter
    def th3(self, value: int) -> None:
        self._th3 = value

    # Encoder: RovControlPtzData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 th1[2]
        data[0] = (((((self._th1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._th1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 th2[2]
        data[2] = (((((self._th2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._th2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 th3[2]
        data[4] = (((((self._th3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._th3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPtzData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 th1[2]
        self._th1 = (((data[0] & 255) >> 0) << 8)
        self._th1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 th2[2]
        self._th2 = (((data[2] & 255) >> 0) << 8)
        self._th2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 th3[2]
        self._th3 = (((data[4] & 255) >> 0) << 8)
        self._th3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPtzData ====================

# ====================== RovControlServoAData ======================

# Struct: RovControlServoAData [6] {3 fields}
class RovControlServoAData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm1[2]
        self._pwm1: int = 0
        # [2:4) NormalField: uint16 pwm2[2]
        self._pwm2: int = 0
        # [4:6) NormalField: uint16 pwm3[2]
        self._pwm3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm1
    @property
    def pwm1(self) -> int:
        return self._pwm1

    # RawSetter: pwm1
    @pwm1.setter
    def pwm1(self, value: int) -> None:
        self._pwm1 = value

    # RawGetter: pwm2
    @property
    def pwm2(self) -> int:
        return self._pwm2

    # RawSetter: pwm2
    @pwm2.setter
    def pwm2(self, value: int) -> None:
        self._pwm2 = value

    # RawGetter: pwm3
    @property
    def pwm3(self) -> int:
        return self._pwm3

    # RawSetter: pwm3
    @pwm3.setter
    def pwm3(self, value: int) -> None:
        self._pwm3 = value

    # Encoder: RovControlServoAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm1[2]
        data[0] = (((((self._pwm1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm2[2]
        data[2] = (((((self._pwm2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm3[2]
        data[4] = (((((self._pwm3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm1[2]
        self._pwm1 = (((data[0] & 255) >> 0) << 8)
        self._pwm1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm2[2]
        self._pwm2 = (((data[2] & 255) >> 0) << 8)
        self._pwm2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm3[2]
        self._pwm3 = (((data[4] & 255) >> 0) << 8)
        self._pwm3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoAData ====================

# ====================== RovControlServoBData ======================

# Struct: RovControlServoBData [6] {3 fields}
class RovControlServoBData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm4[2]
        self._pwm4: int = 0
        # [2:4) NormalField: uint16 pwm5[2]
        self._pwm5: int = 0
        # [4:6) NormalField: uint16 pwm6[2]
        self._pwm6: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm4
    @property
    def pwm4(self) -> int:
        return self._pwm4

    # RawSetter: pwm4
    @pwm4.setter
    def pwm4(self, value: int) -> None:
        self._pwm4 = value

    # RawGetter: pwm5
    @property
    def pwm5(self) -> int:
        return self._pwm5

    # RawSetter: pwm5
    @pwm5.setter
    def pwm5(self, value: int) -> None:
        self._pwm5 = value

    # RawGetter: pwm6
    @property
    def pwm6(self) -> int:
        return self._pwm6

    # RawSetter: pwm6
    @pwm6.setter
    def pwm6(self, value: int) -> None:
        self._pwm6 = value

    # Encoder: RovControlServoBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm4[2]
        data[0] = (((((self._pwm4 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm4 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm5[2]
        data[2] = (((((self._pwm5 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm5 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm6[2]
        data[4] = (((((self._pwm6 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm6 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm4[2]
        self._pwm4 = (((data[0] & 255) >> 0) << 8)
        self._pwm4 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm5[2]
        self._pwm5 = (((data[2] & 255) >> 0) << 8)
        self._pwm5 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm6[2]
        self._pwm6 = (((data[4] & 255) >> 0) << 8)
        self._pwm6 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoBData ====================

# ====================== RovControlServoCData ======================

# Struct: RovControlServoCData [6] {3 fields}
class RovControlServoCData:
    def __init__(self):
        # [0:2) NormalField: uint16 pwm7[2]
        self._pwm7: int = 0
        # [2:4) NormalField: uint16 pwm8[2]
        self._pwm8: int = 0
        # [4:6) NormalField: uint16 pwm9[2]
        self._pwm9: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: pwm7
    @property
    def pwm7(self) -> int:
        return self._pwm7

    # RawSetter: pwm7
    @pwm7.setter
    def pwm7(self, value: int) -> None:
        self._pwm7 = value

    # RawGetter: pwm8
    @property
    def pwm8(self) -> int:
        return self._pwm8

    # RawSetter: pwm8
    @pwm8.setter
    def pwm8(self, value: int) -> None:
        self._pwm8 = value

    # RawGetter: pwm9
    @property
    def pwm9(self) -> int:
        return self._pwm9

    # RawSetter: pwm9
    @pwm9.setter
    def pwm9(self, value: int) -> None:
        self._pwm9 = value

    # Encoder: RovControlServoCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 pwm7[2]
        data[0] = (((((self._pwm7 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pwm7 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 pwm8[2]
        data[2] = (((((self._pwm8 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._pwm8 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pwm9[2]
        data[4] = (((((self._pwm9 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pwm9 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlServoCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 pwm7[2]
        self._pwm7 = (((data[0] & 255) >> 0) << 8)
        self._pwm7 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 pwm8[2]
        self._pwm8 = (((data[2] & 255) >> 0) << 8)
        self._pwm8 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pwm9[2]
        self._pwm9 = (((data[4] & 255) >> 0) << 8)
        self._pwm9 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlServoCData ====================

# ====================== RovControlPostureData ======================

# Struct: RovControlPostureData [6] {3 fields}
class RovControlPostureData:
    def __init__(self):
        # [0:2) NormalField: uint16 forward_backward[2]
        self._forward_backward: int = 0
        # [2:4) NormalField: uint16 left_right[2]
        self._left_right: int = 0
        # [4:6) NormalField: uint16 up_down[2]
        self._up_down: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: forward_backward_percent
    @property
    def forward_backward_percent(self) -> float:
        return (((int(self._forward_backward) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: forward_backward_percent
    @forward_backward_percent.setter
    def forward_backward_percent(self, value: float) -> None:
        self._forward_backward = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: forward_backward_percent_int
    @property
    def forward_backward_percent_int(self) -> int:
        return int(((((int(self._forward_backward) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: forward_backward
    @property
    def forward_backward(self) -> int:
        return self._forward_backward

    # RawSetter: forward_backward
    @forward_backward.setter
    def forward_backward(self, value: int) -> None:
        self._forward_backward = value

    # CustomGetter: left_right_percent
    @property
    def left_right_percent(self) -> float:
        return (((int(self._left_right) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: left_right_percent
    @left_right_percent.setter
    def left_right_percent(self, value: float) -> None:
        self._left_right = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: left_right_percent_int
    @property
    def left_right_percent_int(self) -> int:
        return int(((((int(self._left_right) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: left_right
    @property
    def left_right(self) -> int:
        return self._left_right

    # RawSetter: left_right
    @left_right.setter
    def left_right(self, value: int) -> None:
        self._left_right = value

    # CustomGetter: up_down_percent
    @property
    def up_down_percent(self) -> float:
        return (((int(self._up_down) - 1530.000000) / 10.000000) / 0.450000)

    # CustomSetter: up_down_percent
    @up_down_percent.setter
    def up_down_percent(self, value: float) -> None:
        self._up_down = int((((value * 10) * 0.450000) + 1530.000000))

    # CustomGetter: up_down_percent_int
    @property
    def up_down_percent_int(self) -> int:
        return int(((((int(self._up_down) - 1530.000000) / 10.000000) / 0.450000) + 0.500000))

    # RawGetter: up_down
    @property
    def up_down(self) -> int:
        return self._up_down

    # RawSetter: up_down
    @up_down.setter
    def up_down(self, value: int) -> None:
        self._up_down = value

    # Encoder: RovControlPostureData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 forward_backward[2]
        data[0] = (((((self._forward_backward >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._forward_backward >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 left_right[2]
        data[2] = (((((self._left_right >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._left_right >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 up_down[2]
        data[4] = (((((self._up_down >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._up_down >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovControlPostureData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 forward_backward[2]
        self._forward_backward = (((data[0] & 255) >> 0) << 8)
        self._forward_backward |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 left_right[2]
        self._left_right = (((data[2] & 255) >> 0) << 8)
        self._left_right |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 up_down[2]
        self._up_down = (((data[4] & 255) >> 0) << 8)
        self._up_down |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovControlPostureData ====================

