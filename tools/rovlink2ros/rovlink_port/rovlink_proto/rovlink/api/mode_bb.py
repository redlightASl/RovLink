# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovModeModeAData ======================

# Struct: RovModeModeAData [6] {6 fields}
class RovModeModeAData:
    def __init__(self):
        # [0:1) NormalField: bool side_push[1]
        self._side_push: bool = False
        # [1:2) NormalField: bool tilt[1]
        self._tilt: bool = False
        # [2:3) NormalField: bool roll[1]
        self._roll: bool = False
        # [3:4) NormalField: bool auxiliary[1]
        self._auxiliary: bool = False
        # [4:5) NormalField: bool rescue[1]
        self._rescue: bool = False
        # [5:6) NormalField: bool module[1]
        self._module: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: side_push
    @property
    def side_push(self) -> bool:
        return self._side_push

    # RawSetter: side_push
    @side_push.setter
    def side_push(self, value: bool) -> None:
        self._side_push = value

    # RawGetter: tilt
    @property
    def tilt(self) -> bool:
        return self._tilt

    # RawSetter: tilt
    @tilt.setter
    def tilt(self, value: bool) -> None:
        self._tilt = value

    # RawGetter: roll
    @property
    def roll(self) -> bool:
        return self._roll

    # RawSetter: roll
    @roll.setter
    def roll(self, value: bool) -> None:
        self._roll = value

    # RawGetter: auxiliary
    @property
    def auxiliary(self) -> bool:
        return self._auxiliary

    # RawSetter: auxiliary
    @auxiliary.setter
    def auxiliary(self, value: bool) -> None:
        self._auxiliary = value

    # RawGetter: rescue
    @property
    def rescue(self) -> bool:
        return self._rescue

    # RawSetter: rescue
    @rescue.setter
    def rescue(self, value: bool) -> None:
        self._rescue = value

    # RawGetter: module
    @property
    def module(self) -> bool:
        return self._module

    # RawSetter: module
    @module.setter
    def module(self, value: bool) -> None:
        self._module = value

    # Encoder: RovModeModeAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool side_push[1]
        data[0] = (((((self._side_push >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool tilt[1]
        data[1] = (((((self._tilt >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool roll[1]
        data[2] = (((((self._roll >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auxiliary[1]
        data[3] = (((((self._auxiliary >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool rescue[1]
        data[4] = (((((self._rescue >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool module[1]
        data[5] = (((((self._module >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovModeModeAData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool side_push[1]
        self._side_push = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool tilt[1]
        self._tilt = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool roll[1]
        self._roll = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auxiliary[1]
        self._auxiliary = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool rescue[1]
        self._rescue = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool module[1]
        self._module = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovModeModeAData ====================

# ====================== RovModeModeBData ======================

# Struct: RovModeModeBData [6] {6 fields}
class RovModeModeBData:
    def __init__(self):
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading: bool = False
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth: bool = False
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize: bool = False
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule: bool = False
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute: bool = False
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: keep_heading
    @property
    def keep_heading(self) -> bool:
        return self._keep_heading

    # RawSetter: keep_heading
    @keep_heading.setter
    def keep_heading(self, value: bool) -> None:
        self._keep_heading = value

    # RawGetter: keep_depth
    @property
    def keep_depth(self) -> bool:
        return self._keep_depth

    # RawSetter: keep_depth
    @keep_depth.setter
    def keep_depth(self, value: bool) -> None:
        self._keep_depth = value

    # RawGetter: auto_stabilize
    @property
    def auto_stabilize(self) -> bool:
        return self._auto_stabilize

    # RawSetter: auto_stabilize
    @auto_stabilize.setter
    def auto_stabilize(self, value: bool) -> None:
        self._auto_stabilize = value

    # RawGetter: auto_schedule
    @property
    def auto_schedule(self) -> bool:
        return self._auto_schedule

    # RawSetter: auto_schedule
    @auto_schedule.setter
    def auto_schedule(self, value: bool) -> None:
        self._auto_schedule = value

    # RawGetter: auto_execute
    @property
    def auto_execute(self) -> bool:
        return self._auto_execute

    # RawSetter: auto_execute
    @auto_execute.setter
    def auto_execute(self, value: bool) -> None:
        self._auto_execute = value

    # RawGetter: auto_avoiding_obstacles
    @property
    def auto_avoiding_obstacles(self) -> bool:
        return self._auto_avoiding_obstacles

    # RawSetter: auto_avoiding_obstacles
    @auto_avoiding_obstacles.setter
    def auto_avoiding_obstacles(self, value: bool) -> None:
        self._auto_avoiding_obstacles = value

    # Encoder: RovModeModeBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool keep_heading[1]
        data[0] = (((((self._keep_heading >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool keep_depth[1]
        data[1] = (((((self._keep_depth >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool auto_stabilize[1]
        data[2] = (((((self._auto_stabilize >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auto_schedule[1]
        data[3] = (((((self._auto_schedule >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool auto_execute[1]
        data[4] = (((((self._auto_execute >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        data[5] = (((((self._auto_avoiding_obstacles >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovModeModeBData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovModeModeBData ====================

# ====================== RovPowerModeBData ======================

# Struct: RovPowerModeBData [6] {6 fields}
class RovPowerModeBData:
    def __init__(self):
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading: bool = False
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth: bool = False
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize: bool = False
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule: bool = False
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute: bool = False
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: keep_heading
    @property
    def keep_heading(self) -> bool:
        return self._keep_heading

    # RawSetter: keep_heading
    @keep_heading.setter
    def keep_heading(self, value: bool) -> None:
        self._keep_heading = value

    # RawGetter: keep_depth
    @property
    def keep_depth(self) -> bool:
        return self._keep_depth

    # RawSetter: keep_depth
    @keep_depth.setter
    def keep_depth(self, value: bool) -> None:
        self._keep_depth = value

    # RawGetter: auto_stabilize
    @property
    def auto_stabilize(self) -> bool:
        return self._auto_stabilize

    # RawSetter: auto_stabilize
    @auto_stabilize.setter
    def auto_stabilize(self, value: bool) -> None:
        self._auto_stabilize = value

    # RawGetter: auto_schedule
    @property
    def auto_schedule(self) -> bool:
        return self._auto_schedule

    # RawSetter: auto_schedule
    @auto_schedule.setter
    def auto_schedule(self, value: bool) -> None:
        self._auto_schedule = value

    # RawGetter: auto_execute
    @property
    def auto_execute(self) -> bool:
        return self._auto_execute

    # RawSetter: auto_execute
    @auto_execute.setter
    def auto_execute(self, value: bool) -> None:
        self._auto_execute = value

    # RawGetter: auto_avoiding_obstacles
    @property
    def auto_avoiding_obstacles(self) -> bool:
        return self._auto_avoiding_obstacles

    # RawSetter: auto_avoiding_obstacles
    @auto_avoiding_obstacles.setter
    def auto_avoiding_obstacles(self, value: bool) -> None:
        self._auto_avoiding_obstacles = value

    # Encoder: RovPowerModeBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool keep_heading[1]
        data[0] = (((((self._keep_heading >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool keep_depth[1]
        data[1] = (((((self._keep_depth >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool auto_stabilize[1]
        data[2] = (((((self._auto_stabilize >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool auto_schedule[1]
        data[3] = (((((self._auto_schedule >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool auto_execute[1]
        data[4] = (((((self._auto_execute >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        data[5] = (((((self._auto_avoiding_obstacles >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovPowerModeBData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool keep_heading[1]
        self._keep_heading = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool keep_depth[1]
        self._keep_depth = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool auto_stabilize[1]
        self._auto_stabilize = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool auto_schedule[1]
        self._auto_schedule = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool auto_execute[1]
        self._auto_execute = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool auto_avoiding_obstacles[1]
        self._auto_avoiding_obstacles = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovPowerModeBData ====================

