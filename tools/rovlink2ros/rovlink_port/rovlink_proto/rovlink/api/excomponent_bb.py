# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovExcomponentRelayData ======================

# Struct: RovExcomponentRelayData [6] {6 fields}
class RovExcomponentRelayData:
    def __init__(self):
        # [0:1) NormalField: bool lazer[1]
        self._lazer: bool = False
        # [1:2) NormalField: bool clamp[1]
        self._clamp: bool = False
        # [2:3) NormalField: bool arm[1]
        self._arm: bool = False
        # [3:4) NormalField: bool sonar[1]
        self._sonar: bool = False
        # [4:5) NormalField: bool propeller[1]
        self._propeller: bool = False
        # [5:6) NormalField: bool ptz[1]
        self._ptz: bool = False

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: lazer
    @property
    def lazer(self) -> bool:
        return self._lazer

    # RawSetter: lazer
    @lazer.setter
    def lazer(self, value: bool) -> None:
        self._lazer = value

    # RawGetter: clamp
    @property
    def clamp(self) -> bool:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: bool) -> None:
        self._clamp = value

    # RawGetter: arm
    @property
    def arm(self) -> bool:
        return self._arm

    # RawSetter: arm
    @arm.setter
    def arm(self, value: bool) -> None:
        self._arm = value

    # RawGetter: sonar
    @property
    def sonar(self) -> bool:
        return self._sonar

    # RawSetter: sonar
    @sonar.setter
    def sonar(self, value: bool) -> None:
        self._sonar = value

    # RawGetter: propeller
    @property
    def propeller(self) -> bool:
        return self._propeller

    # RawSetter: propeller
    @propeller.setter
    def propeller(self, value: bool) -> None:
        self._propeller = value

    # RawGetter: ptz
    @property
    def ptz(self) -> bool:
        return self._ptz

    # RawSetter: ptz
    @ptz.setter
    def ptz(self, value: bool) -> None:
        self._ptz = value

    # Encoder: RovExcomponentRelayData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: bool lazer[1]
        data[0] = (((((self._lazer >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: bool clamp[1]
        data[1] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: bool arm[1]
        data[2] = (((((self._arm >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: bool sonar[1]
        data[3] = (((((self._sonar >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: bool propeller[1]
        data[4] = (((((self._propeller >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: bool ptz[1]
        data[5] = (((((self._ptz >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcomponentRelayData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: bool lazer[1]
        self._lazer = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: bool clamp[1]
        self._clamp = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: bool arm[1]
        self._arm = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: bool sonar[1]
        self._sonar = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: bool propeller[1]
        self._propeller = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: bool ptz[1]
        self._ptz = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcomponentRelayData ====================

# ====================== RovExcomponentRescueData ======================

# Struct: RovExcomponentRescueData [6] {6 fields}
class RovExcomponentRescueData:
    def __init__(self):
        # [0:1) NormalField: uint8 stretch[1]
        self._stretch: int = 0
        # [1:2) NormalField: uint8 left_servo[1]
        self._left_servo: int = 0
        # [2:3) NormalField: uint8 right_servo[1]
        self._right_servo: int = 0
        # [3:4) NormalField: uint8 clamp[1]
        self._clamp: int = 0
        # [4:5) NormalField: uint8 turn_servo[1]
        self._turn_servo: int = 0
        # [5:6) NormalField: uint8 solution[1]
        self._solution: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: stretch
    @property
    def stretch(self) -> int:
        return self._stretch

    # RawSetter: stretch
    @stretch.setter
    def stretch(self, value: int) -> None:
        self._stretch = value

    # RawGetter: left_servo
    @property
    def left_servo(self) -> int:
        return self._left_servo

    # RawSetter: left_servo
    @left_servo.setter
    def left_servo(self, value: int) -> None:
        self._left_servo = value

    # RawGetter: right_servo
    @property
    def right_servo(self) -> int:
        return self._right_servo

    # RawSetter: right_servo
    @right_servo.setter
    def right_servo(self, value: int) -> None:
        self._right_servo = value

    # RawGetter: clamp
    @property
    def clamp(self) -> int:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: int) -> None:
        self._clamp = value

    # RawGetter: turn_servo
    @property
    def turn_servo(self) -> int:
        return self._turn_servo

    # RawSetter: turn_servo
    @turn_servo.setter
    def turn_servo(self, value: int) -> None:
        self._turn_servo = value

    # RawGetter: solution
    @property
    def solution(self) -> int:
        return self._solution

    # RawSetter: solution
    @solution.setter
    def solution(self, value: int) -> None:
        self._solution = value

    # Encoder: RovExcomponentRescueData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:1) NormalField: uint8 stretch[1]
        data[0] = (((((self._stretch >> 0) & 255) >> 0) << 0) & 255)
        # [1:2) NormalField: uint8 left_servo[1]
        data[1] = (((((self._left_servo >> 0) & 255) >> 0) << 0) & 255)
        # [2:3) NormalField: uint8 right_servo[1]
        data[2] = (((((self._right_servo >> 0) & 255) >> 0) << 0) & 255)
        # [3:4) NormalField: uint8 clamp[1]
        data[3] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [4:5) NormalField: uint8 turn_servo[1]
        data[4] = (((((self._turn_servo >> 0) & 255) >> 0) << 0) & 255)
        # [5:6) NormalField: uint8 solution[1]
        data[5] = (((((self._solution >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcomponentRescueData
    def decode(self, data: bytearray) -> bool:
        # [0:1) NormalField: uint8 stretch[1]
        self._stretch = (((data[0] & 255) >> 0) << 0)
        # [1:2) NormalField: uint8 left_servo[1]
        self._left_servo = (((data[1] & 255) >> 0) << 0)
        # [2:3) NormalField: uint8 right_servo[1]
        self._right_servo = (((data[2] & 255) >> 0) << 0)
        # [3:4) NormalField: uint8 clamp[1]
        self._clamp = (((data[3] & 255) >> 0) << 0)
        # [4:5) NormalField: uint8 turn_servo[1]
        self._turn_servo = (((data[4] & 255) >> 0) << 0)
        # [5:6) NormalField: uint8 solution[1]
        self._solution = (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcomponentRescueData ====================

