# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovBatteryVoltageData ======================

# Struct: RovBatteryVoltageData [6] {3 fields}
class RovBatteryVoltageData:
    def __init__(self):
        # [0:2) NormalField: uint16 voltage[2]
        self._voltage: int = 0
        # [2:4) NormalField: uint16 power[2]
        self._power: int = 0
        # [4:6) NormalField: uint16 discharge[2]
        self._discharge: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: voltage
    @property
    def voltage(self) -> int:
        return self._voltage

    # RawSetter: voltage
    @voltage.setter
    def voltage(self, value: int) -> None:
        self._voltage = value

    # RawGetter: power
    @property
    def power(self) -> int:
        return self._power

    # RawSetter: power
    @power.setter
    def power(self, value: int) -> None:
        self._power = value

    # RawGetter: discharge
    @property
    def discharge(self) -> int:
        return self._discharge

    # RawSetter: discharge
    @discharge.setter
    def discharge(self, value: int) -> None:
        self._discharge = value

    # Encoder: RovBatteryVoltageData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 voltage[2]
        data[0] = (((((self._voltage >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._voltage >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 power[2]
        data[2] = (((((self._power >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._power >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 discharge[2]
        data[4] = (((((self._discharge >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._discharge >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatteryVoltageData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 voltage[2]
        self._voltage = (((data[0] & 255) >> 0) << 8)
        self._voltage |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 power[2]
        self._power = (((data[2] & 255) >> 0) << 8)
        self._power |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 discharge[2]
        self._discharge = (((data[4] & 255) >> 0) << 8)
        self._discharge |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatteryVoltageData ====================

# ====================== RovBatteryCurrentData ======================

# Struct: RovBatteryCurrentData [6] {3 fields}
class RovBatteryCurrentData:
    def __init__(self):
        # [0:2) NormalField: uint16 ca1[2]
        self._ca1: int = 0
        # [2:4) NormalField: uint16 ca2[2]
        self._ca2: int = 0
        # [4:6) NormalField: uint16 ca3[2]
        self._ca3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: ca1
    @property
    def ca1(self) -> int:
        return self._ca1

    # RawSetter: ca1
    @ca1.setter
    def ca1(self, value: int) -> None:
        self._ca1 = value

    # RawGetter: ca2
    @property
    def ca2(self) -> int:
        return self._ca2

    # RawSetter: ca2
    @ca2.setter
    def ca2(self, value: int) -> None:
        self._ca2 = value

    # RawGetter: ca3
    @property
    def ca3(self) -> int:
        return self._ca3

    # RawSetter: ca3
    @ca3.setter
    def ca3(self, value: int) -> None:
        self._ca3 = value

    # Encoder: RovBatteryCurrentData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 ca1[2]
        data[0] = (((((self._ca1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._ca1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 ca2[2]
        data[2] = (((((self._ca2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._ca2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 ca3[2]
        data[4] = (((((self._ca3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._ca3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatteryCurrentData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 ca1[2]
        self._ca1 = (((data[0] & 255) >> 0) << 8)
        self._ca1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 ca2[2]
        self._ca2 = (((data[2] & 255) >> 0) << 8)
        self._ca2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 ca3[2]
        self._ca3 = (((data[4] & 255) >> 0) << 8)
        self._ca3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatteryCurrentData ====================

# ====================== RovBatterySocData ======================

# Struct: RovBatterySocData [6] {3 fields}
class RovBatterySocData:
    def __init__(self):
        # [0:2) NormalField: uint16 soc[2]
        self._soc: int = 0
        # [2:4) NormalField: uint16 discharge_time[2]
        self._discharge_time: int = 0
        # [4:6) NormalField: uint16 res_time[2]
        self._res_time: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: soc
    @property
    def soc(self) -> int:
        return self._soc

    # RawSetter: soc
    @soc.setter
    def soc(self, value: int) -> None:
        self._soc = value

    # RawGetter: discharge_time
    @property
    def discharge_time(self) -> int:
        return self._discharge_time

    # RawSetter: discharge_time
    @discharge_time.setter
    def discharge_time(self, value: int) -> None:
        self._discharge_time = value

    # RawGetter: res_time
    @property
    def res_time(self) -> int:
        return self._res_time

    # RawSetter: res_time
    @res_time.setter
    def res_time(self, value: int) -> None:
        self._res_time = value

    # Encoder: RovBatterySocData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 soc[2]
        data[0] = (((((self._soc >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._soc >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 discharge_time[2]
        data[2] = (((((self._discharge_time >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._discharge_time >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 res_time[2]
        data[4] = (((((self._res_time >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._res_time >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovBatterySocData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 soc[2]
        self._soc = (((data[0] & 255) >> 0) << 8)
        self._soc |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 discharge_time[2]
        self._discharge_time = (((data[2] & 255) >> 0) << 8)
        self._discharge_time |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 res_time[2]
        self._res_time = (((data[4] & 255) >> 0) << 8)
        self._res_time |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovBatterySocData ====================

