# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovSensorCabTempHumidPressData ======================

# Struct: RovSensorCabTempHumidPressData [6] {3 fields}
class RovSensorCabTempHumidPressData:
    def __init__(self):
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature: int = 0
        # [2:4) NormalField: uint16 humidity[2]
        self._humidity: int = 0
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: temperature_display
    @property
    def temperature_display(self) -> float:
        return (self._temperature / 100.000000)

    # CustomSetter: temperature_display
    @temperature_display.setter
    def temperature_display(self, value: float) -> None:
        self._temperature = int((value * 100.000000))

    # RawGetter: temperature
    @property
    def temperature(self) -> int:
        return self._temperature

    # RawSetter: temperature
    @temperature.setter
    def temperature(self, value: int) -> None:
        self._temperature = value

    # CustomGetter: humidity_display
    @property
    def humidity_display(self) -> float:
        return (self._humidity / 100.000000)

    # CustomSetter: humidity_display
    @humidity_display.setter
    def humidity_display(self, value: float) -> None:
        self._humidity = int((value * 100.000000))

    # RawGetter: humidity
    @property
    def humidity(self) -> int:
        return self._humidity

    # RawSetter: humidity
    @humidity.setter
    def humidity(self, value: int) -> None:
        self._humidity = value

    # CustomGetter: pressure_display
    @property
    def pressure_display(self) -> float:
        return (self._pressure / 100.000000)

    # CustomSetter: pressure_display
    @pressure_display.setter
    def pressure_display(self, value: float) -> None:
        self._pressure = int((value * 100.000000))

    # RawGetter: pressure
    @property
    def pressure(self) -> int:
        return self._pressure

    # RawSetter: pressure
    @pressure.setter
    def pressure(self, value: int) -> None:
        self._pressure = value

    # Encoder: RovSensorCabTempHumidPressData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 temperature[2]
        data[0] = (((((self._temperature >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._temperature >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 humidity[2]
        data[2] = (((((self._humidity >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._humidity >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pressure[2]
        data[4] = (((((self._pressure >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pressure >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorCabTempHumidPressData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature = (((data[0] & 255) >> 0) << 8)
        self._temperature |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 humidity[2]
        self._humidity = (((data[2] & 255) >> 0) << 8)
        self._humidity |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure = (((data[4] & 255) >> 0) << 8)
        self._pressure |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorCabTempHumidPressData ====================

# ====================== RovSensorWaterTempDepthPressData ======================

# Struct: RovSensorWaterTempDepthPressData [6] {3 fields}
class RovSensorWaterTempDepthPressData:
    def __init__(self):
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature: int = 0
        # [2:4) NormalField: uint16 depth[2]
        self._depth: int = 0
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: temperature_display
    @property
    def temperature_display(self) -> float:
        return (self._temperature / 100.000000)

    # CustomSetter: temperature_display
    @temperature_display.setter
    def temperature_display(self, value: float) -> None:
        self._temperature = int((value * 100.000000))

    # RawGetter: temperature
    @property
    def temperature(self) -> int:
        return self._temperature

    # RawSetter: temperature
    @temperature.setter
    def temperature(self, value: int) -> None:
        self._temperature = value

    # CustomGetter: trustable
    @property
    def trustable(self) -> bool:
        return (False if ((self._depth / 100.000000) < 1.000000) else True)

    # CustomGetter: confidence
    @property
    def confidence(self) -> int:
        return (0 if ((self._depth / 100.000000) < 1.000000) else 100)

    # CustomGetter: depth_display
    @property
    def depth_display(self) -> float:
        return (self._depth / 100.000000)

    # CustomSetter: depth_display
    @depth_display.setter
    def depth_display(self, value: float) -> None:
        self._depth = int((value * 100.000000))

    # RawGetter: depth
    @property
    def depth(self) -> int:
        return self._depth

    # RawSetter: depth
    @depth.setter
    def depth(self, value: int) -> None:
        self._depth = value

    # CustomGetter: pressure_display
    @property
    def pressure_display(self) -> float:
        return (self._pressure / 100.000000)

    # CustomSetter: pressure_display
    @pressure_display.setter
    def pressure_display(self, value: float) -> None:
        self._pressure = int((value * 100.000000))

    # RawGetter: pressure
    @property
    def pressure(self) -> int:
        return self._pressure

    # RawSetter: pressure
    @pressure.setter
    def pressure(self, value: int) -> None:
        self._pressure = value

    # Encoder: RovSensorWaterTempDepthPressData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 temperature[2]
        data[0] = (((((self._temperature >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._temperature >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 depth[2]
        data[2] = (((((self._depth >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._depth >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 pressure[2]
        data[4] = (((((self._pressure >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._pressure >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorWaterTempDepthPressData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 temperature[2]
        self._temperature = (((data[0] & 255) >> 0) << 8)
        self._temperature |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 depth[2]
        self._depth = (((data[2] & 255) >> 0) << 8)
        self._depth |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 pressure[2]
        self._pressure = (((data[4] & 255) >> 0) << 8)
        self._pressure |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorWaterTempDepthPressData ====================

# ====================== RovSensorAccelerationData ======================

# Struct: RovSensorAccelerationData [6] {3 fields}
class RovSensorAccelerationData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return (((self._x / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return (((self._y / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return (((self._z / 32768.000000) * 16.000000) * 9.800000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int((((value / 16.000000) / 9.800000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorAccelerationData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorAccelerationData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorAccelerationData ====================

# ====================== RovSensorAngularVelocityData ======================

# Struct: RovSensorAngularVelocityData [6] {3 fields}
class RovSensorAngularVelocityData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return ((self._x / 32768.000000) * 2000.000000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return ((self._y / 32768.000000) * 2000.000000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return ((self._z / 32768.000000) * 2000.000000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int(((value / 2000.000000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorAngularVelocityData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorAngularVelocityData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorAngularVelocityData ====================

# ====================== RovSensorEulerAngleData ======================

# Struct: RovSensorEulerAngleData [6] {3 fields}
class RovSensorEulerAngleData:
    def __init__(self):
        # [0:2) NormalField: int16 pitch[2]
        self._pitch: int = 0
        # [2:4) NormalField: int16 roll[2]
        self._roll: int = 0
        # [4:6) NormalField: uint16 yaw[2]
        self._yaw: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: pitch_display
    @property
    def pitch_display(self) -> float:
        return float(self._pitch)

    # CustomSetter: pitch_display
    @pitch_display.setter
    def pitch_display(self, value: float) -> None:
        self._pitch = int(value)

    # RawGetter: pitch
    @property
    def pitch(self) -> int:
        return self._pitch

    # RawSetter: pitch
    @pitch.setter
    def pitch(self, value: int) -> None:
        self._pitch = value

    # CustomGetter: roll_display
    @property
    def roll_display(self) -> float:
        return float(self._roll)

    # CustomSetter: roll_display
    @roll_display.setter
    def roll_display(self, value: float) -> None:
        self._roll = int(value)

    # RawGetter: roll
    @property
    def roll(self) -> int:
        return self._roll

    # RawSetter: roll
    @roll.setter
    def roll(self, value: int) -> None:
        self._roll = value

    # CustomGetter: yaw_display
    @property
    def yaw_display(self) -> float:
        return float(((self._yaw + 180) % 360))

    # CustomSetter: yaw_display
    @yaw_display.setter
    def yaw_display(self, value: float) -> None:
        self._yaw = int(((int(value) + 180) % 360))

    # RawGetter: yaw
    @property
    def yaw(self) -> int:
        return self._yaw

    # RawSetter: yaw
    @yaw.setter
    def yaw(self, value: int) -> None:
        self._yaw = value

    # Encoder: RovSensorEulerAngleData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: int16 pitch[2]
        data[0] = (((((self._pitch >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._pitch >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: int16 roll[2]
        data[2] = (((((self._roll >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._roll >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 yaw[2]
        data[4] = (((((self._yaw >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._yaw >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorEulerAngleData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: int16 pitch[2]
        self._pitch = (((data[0] & 255) >> 0) << 8)
        self._pitch |= (((data[1] & 255) >> 0) << 0)
        self._pitch = ((self._pitch) ^ 32768) - 32768
        # [2:4) NormalField: int16 roll[2]
        self._roll = (((data[2] & 255) >> 0) << 8)
        self._roll |= (((data[3] & 255) >> 0) << 0)
        self._roll = ((self._roll) ^ 32768) - 32768
        # [4:6) NormalField: uint16 yaw[2]
        self._yaw = (((data[4] & 255) >> 0) << 8)
        self._yaw |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorEulerAngleData ====================

# ====================== RovSensorMagneticFieldData ======================

# Struct: RovSensorMagneticFieldData [6] {3 fields}
class RovSensorMagneticFieldData:
    def __init__(self):
        # [0:2) NormalField: uint16 x[2]
        self._x: int = 0
        # [2:4) NormalField: uint16 y[2]
        self._y: int = 0
        # [4:6) NormalField: uint16 z[2]
        self._z: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: x_display
    @property
    def x_display(self) -> float:
        return ((self._x / 32768.000000) * 4912.000000)

    # CustomSetter: x_display
    @x_display.setter
    def x_display(self, value: float) -> None:
        self._x = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: x
    @property
    def x(self) -> int:
        return self._x

    # RawSetter: x
    @x.setter
    def x(self, value: int) -> None:
        self._x = value

    # CustomGetter: y_display
    @property
    def y_display(self) -> float:
        return ((self._y / 32768.000000) * 4912.000000)

    # CustomSetter: y_display
    @y_display.setter
    def y_display(self, value: float) -> None:
        self._y = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: y
    @property
    def y(self) -> int:
        return self._y

    # RawSetter: y
    @y.setter
    def y(self, value: int) -> None:
        self._y = value

    # CustomGetter: z_display
    @property
    def z_display(self) -> float:
        return ((self._z / 32768.000000) * 4912.000000)

    # CustomSetter: z_display
    @z_display.setter
    def z_display(self, value: float) -> None:
        self._z = int(((value / 4912.000000) * 32768.000000))

    # RawGetter: z
    @property
    def z(self) -> int:
        return self._z

    # RawSetter: z
    @z.setter
    def z(self, value: int) -> None:
        self._z = value

    # Encoder: RovSensorMagneticFieldData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 x[2]
        data[0] = (((((self._x >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._x >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 y[2]
        data[2] = (((((self._y >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._y >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 z[2]
        data[4] = (((((self._z >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._z >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovSensorMagneticFieldData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 x[2]
        self._x = (((data[0] & 255) >> 0) << 8)
        self._x |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 y[2]
        self._y = (((data[2] & 255) >> 0) << 8)
        self._y |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 z[2]
        self._z = (((data[4] & 255) >> 0) << 8)
        self._z |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovSensorMagneticFieldData ====================

# ====================== RovSensorHeightSonarData ======================

# Struct: RovSensorHeightSonarData [6] {3 fields}
class RovSensorHeightSonarData:
    def __init__(self):
        # [0:2) NormalField: uint16 height[2]
        self._height: int = 0
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: height_display
    @property
    def height_display(self) -> float:
        return (self._height / 100.000000)

    # CustomSetter: height_display
    @height_display.setter
    def height_display(self, value: float) -> None:
        self._height = int((value * 100.000000))

    # RawGetter: height
    @property
    def height(self) -> int:
        return self._height

    # RawSetter: height
    @height.setter
    def height(self, value: int) -> None:
        self._height = value

    # CustomGetter: trustable
    @property
    def trustable(self) -> bool:
        return (False if ((self._confidence / 100.000000) <= 95) else True)

    # CustomGetter: confidence_display
    @property
    def confidence_display(self) -> float:
        return (self._confidence / 100.000000)

    # CustomSetter: confidence_display
    @confidence_display.setter
    def confidence_display(self, value: float) -> None:
        self._confidence = int((value * 100.000000))

    # RawGetter: confidence
    @property
    def confidence(self) -> int:
        return self._confidence

    # RawSetter: confidence
    @confidence.setter
    def confidence(self, value: int) -> None:
        self._confidence = value

    # Encoder: RovSensorHeightSonarData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 height[2]
        data[0] = (((((self._height >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._height >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 confidence[2]
        data[2] = (((((self._confidence >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._confidence >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovSensorHeightSonarData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 height[2]
        self._height = (((data[0] & 255) >> 0) << 8)
        self._height |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence = (((data[2] & 255) >> 0) << 8)
        self._confidence |= (((data[3] & 255) >> 0) << 0)
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovSensorHeightSonarData ====================

# ====================== RovSensorDistanceSonarData ======================

# Struct: RovSensorDistanceSonarData [6] {3 fields}
class RovSensorDistanceSonarData:
    def __init__(self):
        # [0:2) NormalField: uint16 distance[2]
        self._distance: int = 0
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # CustomGetter: distance_display
    @property
    def distance_display(self) -> float:
        return (self._distance / 100.000000)

    # CustomSetter: distance_display
    @distance_display.setter
    def distance_display(self, value: float) -> None:
        self._distance = int((value * 100.000000))

    # RawGetter: distance
    @property
    def distance(self) -> int:
        return self._distance

    # RawSetter: distance
    @distance.setter
    def distance(self, value: int) -> None:
        self._distance = value

    # CustomGetter: confidence_display
    @property
    def confidence_display(self) -> float:
        return (self._confidence / 100.000000)

    # CustomSetter: confidence_display
    @confidence_display.setter
    def confidence_display(self, value: float) -> None:
        self._confidence = int((value * 100.000000))

    # RawGetter: confidence
    @property
    def confidence(self) -> int:
        return self._confidence

    # RawSetter: confidence
    @confidence.setter
    def confidence(self, value: int) -> None:
        self._confidence = value

    # Encoder: RovSensorDistanceSonarData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 distance[2]
        data[0] = (((((self._distance >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._distance >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 confidence[2]
        data[2] = (((((self._confidence >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._confidence >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovSensorDistanceSonarData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 distance[2]
        self._distance = (((data[0] & 255) >> 0) << 8)
        self._distance |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 confidence[2]
        self._confidence = (((data[2] & 255) >> 0) << 8)
        self._confidence |= (((data[3] & 255) >> 0) << 0)
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovSensorDistanceSonarData ====================

