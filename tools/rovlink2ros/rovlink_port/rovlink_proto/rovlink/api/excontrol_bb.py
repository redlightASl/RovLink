# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List


# ====================== RovExcontrolClampData ======================

# Struct: RovExcontrolClampData [6] {3 fields}
class RovExcontrolClampData:
    def __init__(self):
        # [0:2) NormalField: int16 clamp[2]
        self._clamp: int = 0
        # [2:4) NormalField: int16 wrist[2]
        self._wrist: int = 0
        # [4:6) VoidField: void [2]

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: clamp
    @property
    def clamp(self) -> int:
        return self._clamp

    # RawSetter: clamp
    @clamp.setter
    def clamp(self, value: int) -> None:
        self._clamp = value

    # CustomGetter: wrist_percent
    @property
    def wrist_percent(self) -> float:
        return ((self._wrist / 3000.000000) * 100.000000)

    # CustomSetter: wrist_percent
    @wrist_percent.setter
    def wrist_percent(self, value: float) -> None:
        self._wrist = (0 if ((value > -0.500000) and (value < 0.500000)) else value)

    # CustomGetter: wrist_percent_int
    @property
    def wrist_percent_int(self) -> int:
        return int(((self._wrist / 3000.000000) * 100.000000))

    # RawGetter: wrist
    @property
    def wrist(self) -> int:
        return self._wrist

    # RawSetter: wrist
    @wrist.setter
    def wrist(self, value: int) -> None:
        self._wrist = value

    # Encoder: RovExcontrolClampData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: int16 clamp[2]
        data[0] = (((((self._clamp >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._clamp >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: int16 wrist[2]
        data[2] = (((((self._wrist >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._wrist >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) VoidField: void [2]
        return data

    # Decoder: RovExcontrolClampData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: int16 clamp[2]
        self._clamp = (((data[0] & 255) >> 0) << 8)
        self._clamp |= (((data[1] & 255) >> 0) << 0)
        self._clamp = ((self._clamp) ^ 32768) - 32768
        # [2:4) NormalField: int16 wrist[2]
        self._wrist = (((data[2] & 255) >> 0) << 8)
        self._wrist |= (((data[3] & 255) >> 0) << 0)
        self._wrist = ((self._wrist) ^ 32768) - 32768
        # [4:6) VoidField: void [2]
        return True

# ==================== End RovExcontrolClampData ====================

# ====================== RovExcontrolArmAData ======================

# Struct: RovExcontrolArmAData [6] {3 fields}
class RovExcontrolArmAData:
    def __init__(self):
        # [0:2) NormalField: uint16 a1[2]
        self._a1: int = 0
        # [2:4) NormalField: uint16 a2[2]
        self._a2: int = 0
        # [4:6) NormalField: uint16 a3[2]
        self._a3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: a1
    @property
    def a1(self) -> int:
        return self._a1

    # RawSetter: a1
    @a1.setter
    def a1(self, value: int) -> None:
        self._a1 = value

    # RawGetter: a2
    @property
    def a2(self) -> int:
        return self._a2

    # RawSetter: a2
    @a2.setter
    def a2(self, value: int) -> None:
        self._a2 = value

    # RawGetter: a3
    @property
    def a3(self) -> int:
        return self._a3

    # RawSetter: a3
    @a3.setter
    def a3(self, value: int) -> None:
        self._a3 = value

    # Encoder: RovExcontrolArmAData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 a1[2]
        data[0] = (((((self._a1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._a1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 a2[2]
        data[2] = (((((self._a2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._a2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 a3[2]
        data[4] = (((((self._a3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._a3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmAData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 a1[2]
        self._a1 = (((data[0] & 255) >> 0) << 8)
        self._a1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 a2[2]
        self._a2 = (((data[2] & 255) >> 0) << 8)
        self._a2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 a3[2]
        self._a3 = (((data[4] & 255) >> 0) << 8)
        self._a3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmAData ====================

# ====================== RovExcontrolArmBData ======================

# Struct: RovExcontrolArmBData [6] {3 fields}
class RovExcontrolArmBData:
    def __init__(self):
        # [0:2) NormalField: uint16 b1[2]
        self._b1: int = 0
        # [2:4) NormalField: uint16 b2[2]
        self._b2: int = 0
        # [4:6) NormalField: uint16 b3[2]
        self._b3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: b1
    @property
    def b1(self) -> int:
        return self._b1

    # RawSetter: b1
    @b1.setter
    def b1(self, value: int) -> None:
        self._b1 = value

    # RawGetter: b2
    @property
    def b2(self) -> int:
        return self._b2

    # RawSetter: b2
    @b2.setter
    def b2(self, value: int) -> None:
        self._b2 = value

    # RawGetter: b3
    @property
    def b3(self) -> int:
        return self._b3

    # RawSetter: b3
    @b3.setter
    def b3(self, value: int) -> None:
        self._b3 = value

    # Encoder: RovExcontrolArmBData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 b1[2]
        data[0] = (((((self._b1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._b1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 b2[2]
        data[2] = (((((self._b2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._b2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 b3[2]
        data[4] = (((((self._b3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._b3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmBData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 b1[2]
        self._b1 = (((data[0] & 255) >> 0) << 8)
        self._b1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 b2[2]
        self._b2 = (((data[2] & 255) >> 0) << 8)
        self._b2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 b3[2]
        self._b3 = (((data[4] & 255) >> 0) << 8)
        self._b3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmBData ====================

# ====================== RovExcontrolArmCData ======================

# Struct: RovExcontrolArmCData [6] {3 fields}
class RovExcontrolArmCData:
    def __init__(self):
        # [0:2) NormalField: uint16 c1[2]
        self._c1: int = 0
        # [2:4) NormalField: uint16 c2[2]
        self._c2: int = 0
        # [4:6) NormalField: uint16 c3[2]
        self._c3: int = 0

    @staticmethod
    def size() -> int:
        return 6

    # RawGetter: c1
    @property
    def c1(self) -> int:
        return self._c1

    # RawSetter: c1
    @c1.setter
    def c1(self, value: int) -> None:
        self._c1 = value

    # RawGetter: c2
    @property
    def c2(self) -> int:
        return self._c2

    # RawSetter: c2
    @c2.setter
    def c2(self, value: int) -> None:
        self._c2 = value

    # RawGetter: c3
    @property
    def c3(self) -> int:
        return self._c3

    # RawSetter: c3
    @c3.setter
    def c3(self, value: int) -> None:
        self._c3 = value

    # Encoder: RovExcontrolArmCData
    def encode(self) -> bytearray:
        data = bytearray(6)
        # [0:2) NormalField: uint16 c1[2]
        data[0] = (((((self._c1 >> 8) & 255) >> 0) << 0) & 255)
        data[1] = (((((self._c1 >> 0) & 255) >> 0) << 0) & 255)
        # [2:4) NormalField: uint16 c2[2]
        data[2] = (((((self._c2 >> 8) & 255) >> 0) << 0) & 255)
        data[3] = (((((self._c2 >> 0) & 255) >> 0) << 0) & 255)
        # [4:6) NormalField: uint16 c3[2]
        data[4] = (((((self._c3 >> 8) & 255) >> 0) << 0) & 255)
        data[5] = (((((self._c3 >> 0) & 255) >> 0) << 0) & 255)
        return data

    # Decoder: RovExcontrolArmCData
    def decode(self, data: bytearray) -> bool:
        # [0:2) NormalField: uint16 c1[2]
        self._c1 = (((data[0] & 255) >> 0) << 8)
        self._c1 |= (((data[1] & 255) >> 0) << 0)
        # [2:4) NormalField: uint16 c2[2]
        self._c2 = (((data[2] & 255) >> 0) << 8)
        self._c2 |= (((data[3] & 255) >> 0) << 0)
        # [4:6) NormalField: uint16 c3[2]
        self._c3 = (((data[4] & 255) >> 0) << 8)
        self._c3 |= (((data[5] & 255) >> 0) << 0)
        return True

# ==================== End RovExcontrolArmCData ====================

